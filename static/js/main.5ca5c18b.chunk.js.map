{"version":3,"sources":["cards.tsx","assets.ts","icons.tsx","goals.tsx","Game.tsx","actions.tsx","utils.ts","combiner.ts","Board.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CARDS","name","desc","illust","effect","G","ctx","player","out","entities","push","has_fruit","score","move","deck","hand","card","discard","undefined","log_msg","discarded","slice","map","x","includes","AVATARS","goal_illust","FRUITS","src","className","shield_icon","skip_icon","score_based_on_fruit","fruit_idx","num_fruit","filter","fruit","length","GOALS","stackable","target_idx","players","indexOf","num_archives","find","goal","is_goal","deck1","deck2","splice","unshift","setup_player","goals","previous_action","finished","init_round","phase","round","_","times","random","Die","Shuffle","init_deck","init_player","i","init_goals","init_draft","get_next_idx","current_idx","next_idx","place","from_idx","card_idx","direction","from_player","change_hands_or_enter_action_phase","hands","len","console","log","next_action","active_player_idx","enter_action_phase","placed","flip_card","active_player","shield_idx","idx","proceed","skipped","all_finished","enter_place_phase","flip","player_idx","flip_action","INVALID_MOVE","skipper","archive","archive_idx","execute","execute_action","msg","gamelogs","CSPR","setup","public_goals","actions","host","ai_players","avatars","add_avatars","moves","add_action","action","ai_moves","carry_actions","ai_act","init_state","board","get_operations","S","hand_selected","names","args","get_place_operations","flip_actions","execute_actions","ACTIONS","select_hand","change_hand_selected","clear_state","change_board","map_object","fn","obj","new_obj","k","COMBINED","add_place_action","TopPanel","props","onClick","checkGoal","gameCount","DeckArea","cardNum","PlayArea","Card","playedCard","CardAreas","Avatar","style","border","selected","InfoLine","content","PlayerInfo","info","Player","playerInfo","Central","InfoPanel","Controller","operations","operation","combined","display","CardContainer","handleClick","CardRow","cards","handleCardClick","get_player_info","entity","get_entity_icon","get_position","diff","GameBoard","list","process_player","indexes","Math","floor","Goal","is_public","goal_illust_src","BOARDS","GoalBoard","App","Client","game","useState","setS","produce","board_props","useEffect","debug","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ca5c18b.chunk.js","sourcesContent":["import { ICard } from './types';\nimport { move, out, log_msg } from './Game';\n\nexport const CARDS: ICard[] = [\n  {\n    name: \"炸弹\",\n    desc: \"嘣！\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/emojidex/112/bomb_1f4a3.png\",\n    effect(G, ctx, player) {\n      out(player);\n    },\n  },\n  {\n    name: \"护甲\",\n    desc: \"放入持续区，可抵挡1次出局\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/shield_1f6e1.png\",\n    effect(G, ctx, player) {\n      player.entities.push(\"shield\");\n    },\n  },\n  {\n    name: \"白嫖\",\n    desc: \"获得1分\",\n    has_fruit: true,\n    illust: \"https://s3.ax1x.com/2020/12/16/rQ2Eef.jpg\",\n    effect(G, ctx, player) {\n      player.score += 1;\n    },\n  },\n\n  {\n    name: \"鞋子\",\n    desc: \"获得1次跳过机会\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/running-shoe_1f45f.png\",\n    effect(G, ctx, player) {\n      player.entities.push(\"skip\");\n    }\n  },\n{\n    name: \"归档\",\n    desc: \"归档1张牌\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/whatsapp/273/floppy-disk_1f4be.png\",\n    effect(G, ctx, player) {\n      move(player.deck, player.hand);\n    },\n  },\n{\n    name: \"加速\",\n    desc: \"弃掉牌堆顶的1张牌，并执行其2次\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/271/racing-car_1f3ce-fe0f.png\",\n    effect(G, ctx, player) {\n      let card = move(player.deck, player.discard);\n      if (card != undefined) {\n        log_msg(G, ctx, <span>执行了 {card.name} 两次</span>);\n        card.effect(G, ctx, player);\n        card.effect(G, ctx, player);\n      }\n    },\n  },\n  {\n    name: \"拆弹\",\n    desc: \"查看牌堆顶的1张牌，如果是炸弹，将其弃掉，否则放回牌库顶\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/wrench_1f527.png\",\n    effect(G, ctx, player) {\n      let card = player.deck[0];\n      if (card != undefined) {\n        log_msg(G, ctx, <span>使用拆弹翻开 {card.name}</span>);\n        if (card.name == \"炸弹\") {\n          move(player.deck, player.discard);\n        }\n        else {\n          return;\n        }\n      }\n    }\n  },\n  {\n    name: \"引爆\",\n    desc: \"弃掉牌库顶的2张牌，如果其中有炸弹，则直接出局，否则获得1分\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/271/fire_1f525.png\",\n    effect(G, ctx, player) {\n      let discarded = G.deck.slice(0, 2);\n      player.deck = player.deck.slice(2);\n      player.discard = [...discarded, ...player.discard];\n      log_msg(G, ctx, <span>因为引爆弃掉了 {discarded.map(x => <span>{x.name} </span>)}</span>);\n      if (discarded.map(x => x.name).includes(\"炸弹\")) {\n        out(player);\n      }\n      else {\n        player.score += 1;\n      }\n    }\n  },\n\n\n];","export const AVATARS = [\n\"https://s1.ax1x.com/2020/11/08/BI5SKA.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5pDI.png\",\n\"https://s1.ax1x.com/2020/11/08/BI4xvd.png\",\n\"https://s1.ax1x.com/2020/11/08/BI4j8e.png\",\n\"https://s1.ax1x.com/2020/11/08/BI4vgH.png\",\n\"https://s1.ax1x.com/2020/11/08/BI59bt.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5PVP.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5iUf.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5F58.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5APS.png\",\n];\n\nexport const goal_illust = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/beer-mug_1f37a.png\";","import React, { ReactNode } from 'react';\nimport { Entity } from './types';\n\nimport './icons.css';\nimport { contain_key } from './utils';\n\nexport const FRUITS: ReactNode[]= [\n  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/tomato_1f345.png\",\n  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/lemon_1f34b.png\",\n  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/green-apple_1f34f.png\",\n].map(src => <img src={src} className=\"fruit-icon\" />);\n\nexport const shield_icon = <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/shield_1f6e1.png\" className=\"fruit-icon\" />;\n\nexport const skip_icon = <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/running-shoe_1f45f.png\" className=\"fruit-icon\" />;\n\nexport function get_entity_icon(entity: Entity): ReactNode {\n  if (typeof entity == \"object\") {\n    return FRUITS[entity.fruit];\n  }\n  else if (entity == \"shield\") {\n    return shield_icon;\n  }\n  else {\n    return skip_icon;\n  }\n}","import React from 'react';\nimport { goal_illust } from './assets';\nimport { FRUITS } from './icons';\nimport { ICard, IPlayer } from './types';\n\nfunction score_based_on_fruit(player: IPlayer, fruit_idx: number) {\n  let num_fruit = player.entities.filter(x => ((typeof x == \"object\") && (x.fruit == fruit_idx))).length;\n  if (num_fruit >= 3) {\n    player.score += 6;\n  }\n  else if (num_fruit == 2) {\n    player.score += 3;\n  }\n  else if (num_fruit == 1) {\n    player.score += 1;\n  }\n  else {\n    return;\n  }\n}\n\nfunction process_goal(goal: ICard): ICard {\n  return {\n    ...goal,\n    is_goal: true,\n    illust: goal_illust,\n  };\n}\n\nexport const goals_raw: ICard[] = [\n  {\n    name: \"目标: 击杀上家\",\n    desc: \"如果上家已经出局，则获得3分\",\n    stackable: true,\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 3) % 4;\n      let target = G.players[target_idx];\n\n      if (target.out == true) {\n        player.score += 3;\n      }\n    }\n  },\n{\n    name: \"目标: 击杀下家\",\n    desc: \"如果下家已经出局，则获得3分\",\n    stackable: true,\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 1) % 4;\n      let target = G.players[target_idx];\n\n      if (target.out == true) {\n        player.score += 3;\n      }\n    }\n  },\n\n{\n    name: \"目标: 保护上家\",\n    desc: \"如果上家依然存活，则获得1分，否则失去1分\",\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 3) % 4;\n      let target = G.players[target_idx];\n\n      if (target.out != true) {\n        player.score += 1;\n      }\n      else {\n        player.score -= 1;\n      }\n    }\n  },\n\n  {\n    name: \"目标: 保护下家\",\n    desc: \"如果下家依然存活，则获得1分，否则失去1分\",\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 1) % 4;\n      let target = G.players[target_idx];\n      if (target.out != true) {\n        player.score += 1;\n      }\n      else {\n        player.score -= 1;\n      }\n    }\n  },\n\n  {\n    name: \"目标: 水果\",\n    desc: <span>如果你拥有1/2/3个{FRUITS[0]}，则获得1/3/6分</span>,\n    effect(G, ctx, player) {\n      score_based_on_fruit(player, 0);\n    }\n  },\n{\n    name: \"目标: 水果\",\n    desc: <span>如果你拥有1/2/3个{FRUITS[1]}，则获得1/3/6分</span>,\n    effect(G, ctx, player) {\n      score_based_on_fruit(player, 1);\n    }\n  },\n{\n    name: \"目标: 水果\",\n    desc: <span>如果你拥有1/2/3个{FRUITS[2]}，则获得1/3/6分</span>,\n    effect(G, ctx, player) {\n      score_based_on_fruit(player, 2);\n    }\n  },\n  {\n    name: \"目标: 归档\",\n    desc: \"如果你的存档中有1/2张牌，则获得2/5分\",\n    effect(G, ctx, player) {\n      let num_archives = player.hand.length;\n      if (num_archives == 1) {\n        player.score += 2;\n      }\n      else if (num_archives >= 2) {\n        player.score += 5;\n      }\n      else {\n        return;\n      }\n    }\n  },\n  {\n    name: \"目标: 玩个刺激的\",\n    desc: \"如果你的弃牌堆中有\\\"引爆\\\"，则获得2分\",\n    effect(G, ctx, player) {\n      let card = player.discard.find(x => x.name == \"引爆\");\n      if (card != undefined) {\n        player.score += 2;\n      }\n    }\n  },\n];\n\nexport const GOALS = goals_raw.map(process_goal);","import React, { ReactNode as EL } from 'react';\nimport _ from 'lodash';\nimport { Ctx, Move as GeneralMove } from 'boardgame.io';\nimport { INVALID_MOVE } from 'boardgame.io/core';\nimport { CARDS } from './cards';\n\nimport { IGame, ICard, IPlayer, IAction, FlipAction, ExecuteAction } from './types';\nimport { AVATARS } from './assets';\nimport { GOALS } from './goals';\n\n// No \"turn based\" stuffs are used\n\nconst NUM_PLAYERS = 4;\n\ntype Move = (G: IGame, ctx: Ctx, ...args: any[]) => any;\n\nexport function move(deck1: ICard[], deck2: ICard[]) {\n  // This time, only procedure method, works\n  let card = deck1.splice(0, 1)[0];\n  if (card) {\n    deck2.unshift(card);\n    return card\n  }\n  else {\n    return undefined;\n  }\n}\n\nfunction init_deck(ctx: Ctx): ICard[] {\n  // let deck_data = \"\".split(\" \")\n  let deck_data = [..._.times(8, () => \"炸弹\"), ..._.times(3, () => \"护甲\"), ..._.times(4, () => \"白嫖\"), ..._.times(4, () => \"拆弹\"),..._.times(3, () => \"引爆\"),..._.times(3, () => \"加速\"),..._.times(3, () => \"归档\"),..._.times(3, () => \"鞋子\"),];\n  let deck = deck_data.map(name => CARDS.find(x => x.name == name)).filter(x => x != undefined).map(x => ({...x})) as ICard[];\n  for (let card of deck) {\n    if (card.has_fruit) {\n      card.fruit = ctx.random!.Die(3) - 1;\n    }\n  }\n  return ctx.random?.Shuffle(deck) || deck;\n}\n\nfunction setup_player(): IPlayer {\n  const P: IPlayer = {\n    score: 0,\n    hand: [],\n    deck: [],\n    discard: [],\n    goals: [],\n\n    entities: [\"skip\"],\n\n    previous_action: undefined,\n\n    finished: false,\n    out: false,\n\n    // TODO: add goals\n  };\n\n  return P;\n}\n\nconst init_draft: Move = (G, ctx) => {\n  // After all cards are into the deck and deck is shuffled\n  for (let player of G.players) {\n    player.hand = G.deck.slice(0, 7);\n    G.deck = G.deck.slice(7);\n  }\n};\n\nconst add_avatars: Move = (G, ctx) => {\n  let len = G.players.length;\n  let avatars = ctx.random!.Shuffle(AVATARS).slice(0, len);\n  for (let i=0; i<len; i++) {\n    G.players[i].illust = avatars[i];\n  }\n}\n\nconst init_goals: Move = (G, ctx) => {\n  let goals = ctx.random!.Shuffle([...GOALS, ...GOALS.filter(x => x.stackable)]);\n\n  // Debug is 1, then change to 2\n  for (let i=0; i<G.players.length; i++) {\n    let player = G.players[i];\n    player.goals = goals.slice(2*i, 2*i+2);\n  }\n}\n\nconst init_round: Move = (G, ctx) => {\n  // Reset the deck, pass the init player\n  G.phase = \"place\";\n  G.round += 1;\n  G.deck = init_deck(ctx);\n  G.init_player = (G.init_player + 1) % 4;\n\n  // Reset player data\n  for (let player of G.players) {\n    player.deck = [];\n    player.hand = [];\n    player.discard = [];\n    player.entities = [\"skip\"];\n    player.out = false;\n    player.finished = false;\n  }\n\n  init_goals(G, ctx);\n  init_draft(G, ctx);\n}\n\n// This is just for init\nfunction setup(ctx: Ctx): IGame {\n  const G: IGame = {\n    deck: [],\n    players: _.times(NUM_PLAYERS, setup_player),\n    public_goals: [],\n\n    actions: [],\n    round: -1,\n    init_player: (ctx.random?.Die(NUM_PLAYERS) || 1) - 1,\n    active_player_idx: 0,\n    next_action: \"place\",\n\n    phase: \"place\",\n\n    host: 0,\n    ai_players: [1, 2, 3],\n    gamelogs: [],\n  };\n\n  add_avatars(G, ctx);\n\n  init_round(G, ctx);\n\n  return G;\n}\n\nfunction all_finished(G: IGame): boolean {\n  let unfinished_player = G.players.find(x => !x.finished);\n  if (unfinished_player != undefined) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n\nfunction get_next_idx(players: IPlayer[], current_idx: number): number {\n  let next_idx = (current_idx + 1) % (players.length);\n  if (players[next_idx].finished) {\n    return get_next_idx(players, next_idx);\n  }\n  else {\n    return next_idx;\n  }\n}\n\nconst place: Move = (G, ctx, from_idx: number, card_idx: number, direction: number) => {\n  let from_player = G.players[from_idx];\n  let card = from_player.hand[card_idx];\n  from_player.hand = from_player.hand.filter(x => (x != card));\n\n  let to_player = G.players[(from_idx + direction) % G.players.length];\n  to_player.deck.unshift(card);\n\n  from_player.previous_action = direction;\n};\n\nconst ai_moves: Move = (G, ctx) => {\n  for (let idx of G.ai_players) {\n    // AI IMPLEMENT: card_idx and direction\n    let card_idx = ctx.random!.Die(G.players[idx].hand.length) - 1;\n    let direction = ctx.random!.Die(G.players.length) - 1;\n    G.actions.push({\n      from_idx: idx,\n      card_idx, \n      direction,\n    });\n  }\n};\n\nconst enter_action_phase: Move = (G, ctx) => {\n  G.phase = \"action\";\n\n  for (let player of G.players) {\n    player.deck = ctx.random?.Shuffle(player.deck) || player.deck;\n    player.deck = [...player.deck, ...player.goals];\n  }\n\n  G.next_action = \"flip\";\n  G.active_player_idx = G.init_player;\n};\n\n\nconst change_hands_or_enter_action_phase: Move = (G, ctx) => {\n  let hands = G.players.map(player => player.hand);\n  let len = hands.length;\n  let num_remained_cards = hands[0].length;\n\n  if (num_remained_cards == 0) {\n    console.log(\"Time to enter the action phase\");\n    enter_action_phase(G, ctx);\n  }\n\n  else {\n    hands = [hands[len-1], ...hands.slice(0, len-1)];\n    for (let i=0; i<len; i++) {\n      G.players[i].hand = hands[i];\n    }\n  }\n\n  for(let player of G.players) {\n    player.placed = false;\n  }\n};\n\nconst carry_actions: Move = (G, ctx) => {\n  for (let action of G.actions) {\n    place(G, ctx, action.from_idx, action.card_idx, action.direction);\n  }\n  G.actions = [];\n\n  change_hands_or_enter_action_phase(G, ctx);\n};\n\nconst add_action: Move = (G, ctx, action: IAction) => {\n  G.actions.push(action);\n  G.players[action.from_idx].placed = true;\n\n  // let host move\n  let from_idx = action.from_idx;\n  if (from_idx == G.host) {\n    ai_moves(G, ctx);\n  }\n\n  // Check whether it's full\n  if (G.actions.length == G.players.length) {\n    carry_actions(G, ctx);\n  }\n};\n\nfunction flip_card(active_player: IPlayer) {\n  let card = active_player.deck[0];\n  if (card != undefined) {\n    active_player.deck = active_player.deck.slice(1);\n    active_player.discard.unshift(card);\n  }\n}\n\nexport function out(player: IPlayer) {\n  let shield_idx = player.entities.map((x,idx) => (x == \"shield\")? idx : undefined).filter(x => x != undefined)[0];\n  console.log(\"Find shield:\", shield_idx);\n  if (shield_idx != undefined) {\n    player.entities = player.entities.filter((x,idx) => (idx != shield_idx));\n  }\n  else {\n    console.log(`Player ${player.score}分 is out`)\n    player.out = true;\n  }\n}\n\n// const enter_place_phase: Move = (G, ctx) => {\n//   G.phase = \"place\";\n//   // EH: Reconstruct this into reset instead of just copy all setup stuffs\n\n//   G.round += 1;\n//   G.init_player = (G.init_player + 1) % 4;\n\n//   for (let player of G.players) {\n//     G.deck = [...G.deck, ...player.discard, ...player.hand, ...player.deck];\n\n//     player.deck = [];\n//     player.hand = [];\n//     player.discard = [];\n//     player.entities = [\"skip\"];\n//     player.out = false;\n//     player.finished = false;\n//     player.previous_action = undefined;\n//   }\n\n//   G.deck = ctx.random!.Shuffle(G.deck);\n\n//   init_draft(G, ctx);\n// };\n\nconst enter_place_phase: Move = (G, ctx) => {\n  init_round(G, ctx);\n}\n\nconst proceed: Move = (G, ctx, skipped?: boolean) => {\n  if (G.next_action == \"execute\" || skipped) {\n    // Check whether end the action phase, or pass to the next player\n    // Or say that pass to the next player, and if there's nobody to pass, then enter the action phase\n    if (all_finished(G)) {\n      enter_place_phase(G, ctx);\n    }\n    else {\n      let next_idx = get_next_idx(G.players, G.active_player_idx);\n      G.active_player_idx = next_idx;\n      G.next_action = \"flip\";\n    }\n  }\n\n  else {\n    G.next_action = \"execute\";\n  }\n};\n\nconst flip: Move = (G, ctx, player_idx: number, flip_action: FlipAction) => {\n  // Double check is fine\n  if (G.next_action == \"flip\" && G.active_player_idx == player_idx) {\n    let active_player = G.players[G.active_player_idx];\n    let skipped = false;\n\n    if (flip_action == \"skip\") {\n      let skipper = active_player.entities.find(x => x == \"skip\");\n      if (skipper != undefined) {\n        flip_card(active_player);\n        active_player.entities = active_player.entities.filter(x => x != skipper);\n        skipped = true;\n        // G.active_player_idx = (G.active_player_idx + 1) % NUM_PLAYERS;\n        // G.next_action = \"flip\";\n      }\n      else {\n        return INVALID_MOVE;\n      }\n    }\n\n    // EH: Write this in \"utils\" to make it more haskell-styled\n    else if (typeof(flip_action) == \"object\" && \"archive_idx\" in flip_action) {\n      let archive = active_player.hand[flip_action.archive_idx];\n      if (archive != undefined) {\n        active_player.hand = active_player.hand.filter(x => x != archive);\n        active_player.discard.unshift(archive);\n      }\n      else {\n        return INVALID_MOVE;\n      }\n    }\n\n    // Normal flip goes here\n    else {\n      flip_card(active_player);\n      console.log(\"翻开牌\", active_player.discard[0].name);\n      log_msg(G, ctx, [<span>翻开 {active_player.discard[0].name}</span>]);\n    }\n\n    proceed(G, ctx, skipped);\n    \n  }\n  else {\n    return INVALID_MOVE;\n  }\n};\n\nconst execute: Move = (G, ctx, player_idx: number, execute_action: ExecuteAction) => {\n  if (player_idx == G.active_player_idx) {\n    let player = G.players[G.active_player_idx];\n    let card = player.discard[0];\n    console.log(`${player_idx} is executing`);\n    if (execute_action == \"fruit\") {\n      console.log(\"Gonna add fruit\");\n      if (card.fruit != undefined) {\n        player.entities.push({fruit: card.fruit});\n      }\n      else {\n        return INVALID_MOVE;\n      }\n    }\n    else {\n      console.log(`Just execute ${card.name}`);\n      card.effect(G, ctx, player, card);\n    }\n\n    // Check finished\n    player.finished = (player.out || (player.deck.length == 0));\n\n    proceed(G, ctx);\n  }\n  else {\n    return INVALID_MOVE;\n  }\n};\n\nconst ai_act: Move = (G, ctx, from_idx: number) => {\n  if (G.ai_players.includes(G.active_player_idx) && (G.host == from_idx)) {\n    if (G.next_action == \"flip\") {\n      // AI IMPLEMENT: Flip action and execute action\n      let flip_action: FlipAction = \"flip\"\n      flip(G, ctx, G.active_player_idx, flip_action);\n    }\n    else if (G.next_action == \"execute\") {\n      let execute_action: ExecuteAction = \"execute\"\n      execute(G, ctx, G.active_player_idx, execute_action);\n    }\n    else {\n      return INVALID_MOVE;\n    }\n  }\n  else {\n    return INVALID_MOVE;\n  }\n};\n\nexport const log_msg: Move = (G, ctx, msg: string|EL) => {\n  G.gamelogs.unshift(msg);\n}\n\nexport const CSPR = {\n  setup: setup,\n  moves: {\n    add_action,\n    flip,\n    execute,\n    ai_act,\n    log_msg,\n  },\n};","import React from 'react';\nimport { IState, Action, Phase, IOperation, IGame, ICard, FlipAction } from './types'\n\nexport function init_state(): IState {\n  return {\n    board: \"GameBoard\",\n    player_idx: 0,\n    log: \"\",\n  };\n}\n\nconst change_hand_selected: Action = (S, idx: number) => {\n  if (S.hand_selected == idx) {\n    S.hand_selected = undefined;\n  }\n  else {\n    S.hand_selected = idx;\n  }\n}\n\nfunction get_place_operations(from_idx: number, card_idx: number): IOperation[] {\n  let directions = [0, 1, 3, 2];\n  let names = [\"自己\", \"下家\", \"上家\", \"对家\"];\n\n  return directions.map((direction, idx) => ({\n    name: names[idx],\n    action: \"add_place_action\",\n    args: [from_idx, card_idx, direction],\n  }));\n}\n\n// const change_operations_on_select_hand: Action = (S, should_change: boolean) => {\n//   if (should_change) {\n//     if (S.hand_selected != undefined) {\n//       S.operations = get_place_operations(S.player_idx, S.hand_selected);\n//     }\n//     else {\n//       S.operations = [];\n//     }\n//   }\n//   else {\n//     console.log(\"Should not change\");\n//     return;\n//   }\n// }\n\nexport function get_operations(G: IGame, S: IState): IOperation[] {\n  let player = G.players[S.player_idx];\n  if (G.phase == \"place\") {\n    if (!player.placed && S.hand_selected != undefined) {\n      return get_place_operations(S.player_idx, S.hand_selected);\n    }\n    else {\n      return [];\n    }\n  }\n  else {\n    if (G.active_player_idx == S.player_idx) {\n      if (G.next_action == \"flip\") {\n        let flip_actions: IOperation[] = [\n          {name: \"翻开\", action: \"flip\", args: [S.player_idx, \"flip\"]},\n        ];\n        if (player.entities.includes(\"skip\")) {\n          flip_actions.push({name: \"跳过\", action: \"flip\", args: [S.player_idx, \"skip\"]});\n        }\n        if ((player.hand.length > 0) && (S.hand_selected != undefined)) {\n          flip_actions.push({name: \"打出存档\", action: \"flip\", args: [S.player_idx, {archive_idx: S.hand_selected}]});\n        }\n        return flip_actions;\n      }\n      else {\n        let execute_actions: IOperation[] = [\n          {name: \"执行\", action: \"execute\", args: [S.player_idx, \"execute\"]},\n        ];\n        let top_card = player.discard[0];\n        if (top_card.fruit != undefined) {\n          execute_actions.push({name: \"作为水果\", action: \"execute\", args: [S.player_idx, \"fruit\"]});\n        }\n        return execute_actions;\n      }\n    }\n    else {\n      if (S.player_idx == G.host) {\n        return [\n          {\n            name: \"行动\",\n            action: \"ai_act\",\n            args: [S.player_idx],\n          }\n        ];\n      }\n      else {\n        return [];\n      }\n    }\n  }\n}\n\nconst select_hand: Action = (S, idx: number, hand: ICard[]) => {\n  change_hand_selected(S, idx);\n  let card = hand[idx];\n  log_msg(S, <span>{card.name}: {card.desc}</span>);\n}\n\nconst clear_state: Action = (S) => {\n  S.hand_selected = undefined;\n}\n\nconst change_board: Action = (S, board) => {\n  S.board = board;\n}\n\nconst log_msg: Action = (S, msg) => {\n  S.log = msg;\n}\n\nexport const ACTIONS: Record<string, Action> = {\n  select_hand,\n  clear_state,\n  change_board,\n  log_msg,\n};","export function map_object<a,b>(fn: (arg: a, key?: string) => b, obj: Record<string,a>) {\n  let new_obj: Record<string,b> = {};\n\n  for (let k in obj) {\n    new_obj[k] = fn(obj[k], k);\n  }\n\n  return new_obj;\n}\n\nexport function reorder<a>(list: a[], indexes: number[]): a[] {\n  return indexes.map(idx => list[idx]);\n}\n\nexport function contain_key<a,b>(value: a, key: b) {\n  if (typeof value == \"object\" && key in value) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}","import { CombinedAction, Dispatcher, ExecuteAction, FlipAction } from './types';\n\nconst add_place_action: CombinedAction = (moves, actions, from_idx: number, card_idx: number, direction: number) => {\n  moves.add_action({from_idx, card_idx, direction});\n  actions.clear_state();\n};\n\nconst ai_act: CombinedAction = (moves, actions, from_idx: number) => {\n  moves.ai_act(from_idx);\n};\n\nconst flip: CombinedAction = (moves, actions, player_idx: number, flip_action: FlipAction) => {\n  moves.flip(player_idx, flip_action);\n}\n\n\nconst execute: CombinedAction = (moves, actions, player_idx: number, execute_action: ExecuteAction) => {\n  moves.execute(player_idx, execute_action);\n}\n\n// const select_hand: CombinedAction = (moves, actions, hand_idx: number) => {\n//   actions.select_hand(hand_idx);\n//   moves.show_hand_info(hand_idx);\n// }\n\nexport const COMBINED: Record<string, CombinedAction> = {\n  add_place_action,\n  ai_act,\n  flip,\n  execute,\n  // select_hand,\n};","import React, { ReactNode as EL, FC, useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { produce } from 'immer';\nimport { AVATARS } from './assets';\n\nimport './Board.css';\n\nimport { ICard, IPlayer, IGame, IState, Action, IOperation, Dispatcher, CombinedAction, BoardProps } from './types';\nimport { FRUITS, get_entity_icon } from './icons';\nimport { Ctx } from 'boardgame.io';\nimport { BoardProps as BGBoardProps } from 'boardgame.io/react';\nimport { CARDS } from './cards';\nimport { ACTIONS, get_operations, init_state } from './actions';\nimport { map_object, reorder } from './utils';\nimport { COMBINED } from './combiner';\nimport { goal_illust as goal_illust_src } from './assets';\n\nfunction TopPanel(props: {gameCount: string|number, checkGoal:()=>void}) {\n  return <div className=\"top-panel\">\n    <button className=\"check-goal-button\" onClick={props.checkGoal} >查看目标</button>\n    {props.gameCount}\n  </div>;\n}\n\nfunction DeckArea(props: {cardNum: number}) {\n  return <div className=\"deck-area\">\n    <div className=\"card-num\">\n      {props.cardNum}\n    </div>\n  </div>;\n}\n\nfunction PlayArea(props: {playedCard?: ICard}) {\n  return <div className=\"play-area\">\n    <Card {...props.playedCard} />\n  </div>;\n}\n\nfunction CardAreas(props: {cardNum: number, playedCard?: ICard}) {\n  // Both draw pile and discard pile go together,\n  // Also, Card should be 100% and be contained with card containers\n  return <div className=\"card-areas\">\n    <DeckArea cardNum={props.cardNum} />\n    <PlayArea playedCard={props.playedCard} />\n  </div>;\n}\n\nfunction Avatar(props: {illust?: string, selected?: boolean}) {\n  return <div className=\"avatar\" style={{border:(props.selected)?\"3px solid #61dafb\":undefined}}>\n    <img src={props.illust} className=\"avatar-img\" />\n  </div>;\n}\n\nfunction InfoLine(props: {content: string|EL}) {\n  return <div className=\"info-line\">\n    {props.content}\n  </div>;\n}\n\n// TODO: Make an adapter to fit those two\nexport interface IPlayerInfo extends IPlayer {\n  selected?: boolean, \n  name: string, \n  info: string | EL[],\n};\n\nfunction PlayerInfo(props: IPlayerInfo) {\n  return <div className=\"player-info\">\n    <Avatar illust={props.illust} selected={props.selected} />\n    <InfoLine content={`${props.name}(${props.score}分)`} />\n    <InfoLine content={props.info}/>\n  </div>;\n}\n\nfunction Player(props: {playerInfo: IPlayerInfo}) {\n  return <div className=\"player\">\n    <CardAreas cardNum={props.playerInfo.deck.length} playedCard={props.playerInfo.discard[0]} />\n    <PlayerInfo {...props.playerInfo} />\n  </div>;\n}\n\nfunction Central(props: {players: IPlayerInfo[]}) {\n  return <div className=\"central\">\n    {props.players.map(player => \n    // illust name score info\n      <Player playerInfo={player} />\n    )}\n  </div>;\n}\n\nfunction InfoPanel(props: {log: string|EL}) {\n  // Top panel is only used to display count, all other logs are displayed in info panel\n  return <div className=\"info-panel\">\n    {props.log}\n  </div>;\n}\n\nfunction Controller(props: {operations: IOperation[], combined: Record<string, Dispatcher>}) {\n  return <div className=\"controller\">\n    {props.operations.map(operation => \n      <button className=\"controller-button\" onClick={() => props.combined[operation.action](...(operation.args || []))}>{operation.name}</button>\n    )}\n  </div>;\n}\n\nfunction Card(props: Partial<ICard>) {\n  return <div className=\"card\">\n    <div className=\"illust-container\">\n      <img className=\"illust\" src={props.illust} />\n    </div>\n    <div className=\"card-fruit\" style={{display:(props.fruit != undefined)?undefined:\"none\"}}>{(props.fruit != undefined)? FRUITS[props.fruit] : \"\"}</div>\n  </div>;\n}\n\nfunction CardContainer(props: {card: Partial<ICard>, handleClick: ()=>void}) {\n  return <div \n    className = \"card-container\" \n    style = {{border:(props.card.selected == true)?\"3px solid #61dafb\":undefined}}\n    onClick = {props.handleClick}\n  >\n    <Card {...props.card} />\n  </div>;\n}\n\nfunction CardRow(props: {cards: ICard[], handleCardClick: (idx: number)=>()=>void}) {\n  return <div className=\"card-row\">\n    {props.cards.map((card, idx) => <CardContainer card={card} handleClick={props.handleCardClick(idx)} />)}\n  </div>;\n}\n\nfunction Template(props: {}) {\n  return <div className=\"template\">\n  </div>;\n}\n\nfunction hand_processor(S: IState): (card: ICard, idx: number) => ICard {\n  return (card, idx) => ({\n    ...card,\n    selected: S.hand_selected == idx,\n  });\n}\n\nfunction get_player_info(player: IPlayer, G:IGame): string | EL[] {\n  if (G.phase == \"place\") {\n    if (player.previous_action != undefined) {\n      return [\"扣给自己\", \"扣给下家\", \"扣给对家\", \"扣给上家\",][player.previous_action];\n    }\n    else {\n      return \"准备扣牌\";\n    }\n  }\n  else {\n    if (player.finished) {\n      if (player.out) {\n        return \"已出局\";\n      }\n      else {\n        return \"已完成\";\n      }\n    }\n    else {\n      return player.entities.map(entity => get_entity_icon(entity));\n    }\n  }\n}\n\nfunction get_position(idx: number, player_idx: number) {\n  let diff = idx - player_idx;\n  if (diff < 0) {\n    return 4 - diff;\n  }\n  else {\n    return diff;\n  }\n}\n\nfunction process_player(player: IPlayer, idx: number, G: IGame, S: IState): IPlayerInfo {\n  return {\n    ...player,\n    name: [\"玩家\", \"下家\", \"对家\", \"上家\"][get_position(idx, S.player_idx)],\n    info: get_player_info(player, G),\n    selected: (G.phase == \"action\") && (idx == G.active_player_idx),\n  };\n}\n\nfunction GameBoard(props: BoardProps){\n  return <div className=\"board\">\n    <Central \n      players = {reorder(props.G.players.map((player, idx) => process_player(player, idx, props.G, props.S)), [(props.S.player_idx+2)%4,(props.S.player_idx+3)%4,(props.S.player_idx+1)%4,props.S.player_idx])}\n    />\n    {/* <InfoPanel log={msg} /> */}\n    <InfoPanel log={(props.G.phase == \"place\")? props.S.log : props.G.gamelogs[0]} />\n    {/* <InfoPanel log=\"这是一条log\" /> */}\n    {/* <InfoPanel log={props.S.log} /> */}\n    {/* <InfoPanel log={props.G.gamelog} /> */}\n    <Controller \n      operations = {get_operations(props.G, props.S)}\n      combined = {props.combined}\n    />\n    <CardRow \n      cards = {props.G.players[0].hand.map(hand_processor(props.S))}  \n      handleCardClick = {idx => () => props.actions.select_hand(idx, props.G.players[props.S.player_idx].hand)}\n    />\n    <TopPanel gameCount={`${\"東南西\"[Math.floor(props.G.round/4)]}${props.G.round % 4 + 1}局`} checkGoal={()=>props.actions.change_board(\"GoalBoard\")} />\n  </div>;\n}\n\nfunction Goal(props: {goal: ICard}) {\n  let goal_illust = (props.goal.is_public == true)? \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/green-salad_1f957.png\":goal_illust_src;\n  return <div className=\"goal\">\n    <div className=\"goal-illust-container\">\n      <img className=\"goal-illust\" src={goal_illust} />\n    </div>\n    <div className=\"goal-desc-container\">\n      {/*props.goal.name <br/> props.goal.desc*/}\n      <div className=\"goal-desc\">\n        {props.goal.name}<br/>\n        {props.goal.desc}\n      </div>\n    </div>\n  </div>;\n}\n\nfunction GoalBoard(props: BoardProps) {\n  return <div className=\"board\">\n    <div className=\"goals-container\">\n      {props.G.players[props.S.player_idx].goals.map(goal => <Goal goal={goal}/>)}\n    </div>\n    <button className=\"gb-back-button\" onClick={() => props.actions.change_board(\"GameBoard\")} >返回</button>\n  </div>;\n}\n\nconst BOARDS: Record<string, (props:BoardProps)=>JSX.Element> = {\n  GameBoard,\n  GoalBoard,\n};\n\nexport function Board(props: BGBoardProps<IGame>) {\n  let [S, setS] = useState<IState>(init_state);\n  let actions = map_object<Action, Dispatcher>(\n    action => (...args: any[]) => setS(produce(S => action(S, ...args))), \n    ACTIONS,\n  );\n  let combined = map_object<CombinedAction, Dispatcher>(\n    action => (...args: any[]) => action(props.moves, actions, ...args),\n    COMBINED,\n  );\n  let {G, ctx, moves} = props;\n  let board_props: BoardProps = {\n    G, ctx, moves, S, actions, combined,\n  };\n\n  // Show hand info\n  // Don't use useEffect to change the log, a strange bug may happen\n  // useEffect(()=>{\n  //   if (S.hand_selected != undefined) {\n  //     let card = G.players[S.player_idx].hand[S.hand_selected];\n  //     actions.log_msg(`${card.name}: ${card.desc}`);\n  //   }\n  //   else {\n  //     return;\n  //   }\n  // }, [S.hand_selected]);\n\n  // Show game info\n  // useEffect(() => actions.log_msg(G.gamelog), [G.gamelog]);\n\n  useEffect(() => {\n    if (G.phase == \"place\") {\n      actions.change_board(\"GoalBoard\");\n    }\n  }, [G.phase]);\n\n  let board: (props:BoardProps) => JSX.Element = BOARDS[S.board] || GameBoard;\n  // let board = GoalBoard;\n\n  return board(board_props);\n}\n\n","import { Client } from 'boardgame.io/react';\nimport { CSPR } from './Game';\nimport { Board } from './Board';\n\nconst App = Client({\n  game: CSPR,\n  board: Board,\n  debug: false,\n});\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}