{"version":3,"sources":["cards.tsx","assets.ts","goals.tsx","Game.tsx","icons.tsx","actions.tsx","utils.ts","combiner.ts","Board.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CARDS","name","desc","illust","effect","G","ctx","player","out","entities","push","has_fruit","score","idx","players","indexOf","upper_idx","lower_idx","add_fruits","move","deck","hand","card","discard","undefined","log_msg","discarded","slice","map","x","includes","AVATARS","goal_illust","score_based_on_fruit","fruit_idx","num_fruit","filter","fruit","length","GOALS","stackable","target_idx","num_archives","find","goal","is_goal","check_requirements","requirements","self","is_achieved","fruits","reduce","acc","val","new_acc","diffs","cnt","agari","console","log","gamelogs","unshift","PUBLIC_GOALS","is_public","deck1","deck2","splice","setup_player","goals","previous_action","finished","init_round","phase","round","_","times","random","Die","Shuffle","init_deck","init_player","i","public_goals","g","init_goals","init_draft","j","get_next_idx","current_idx","next_idx","place","from_idx","card_idx","direction","from_player","change_hands_or_enter_action_phase","hands","len","next_action","active_player_idx","enter_action_phase","placed","flip_card","active_player","shield_idx","proceed","skipped","all_finished","enter_place_phase","flip","player_idx","flip_action","INVALID_MOVE","skipper","skipper_idx","archive","archive_idx","execute","execute_action","added","msg","CSPR","setup","actions","host","ai_players","numPlayers","avatars","add_avatars","moves","add_action","action","ai_moves","carry_actions","ai_act","minPlayers","maxPlayers","turn","activePlayers","ActivePlayers","ALL","fruit_style","height","width","FRUITS","src","style","shield_icon","skip_icon","init_state","board","get_operations","S","hand_selected","names","args","get_place_operations","flip_actions","execute_actions","ACTIONS","select_hand","change_hand_selected","clear_state","change_board","map_object","fn","obj","new_obj","k","COMBINED","add_place_action","TopPanel","props","className","onClick","checkGoal","gameCount","DeckArea","cardNum","PlayArea","Card","playedCard","CardAreas","Avatar","border","selected","InfoLine","color","content","PlayerInfo","info","Player","playerInfo","Central","InfoPanel","useEffect","Controller","move1","operations","autoMove","operation","setTimeout","combined","display","CardContainer","handleClick","CardRow","cards","handleCardClick","get_player_info","entity","get_entity_icon","get_position","diff","GameBoard","list","process_player","indexes","Math","floor","Goal","goal_illust_src","process_public_goal","fruits_lookup","A","B","C","split","char","BOARDS","GoalBoard","CSPRClient","Client","game","useState","setS","produce","board_props","parseInt","playerID","debug","multiplayer","Local","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAIaA,EAAiB,CAC5B,CACEC,KAAM,eACNC,KAAM,eACNC,OAAQ,oGACRC,OAJF,SAISC,EAAGC,EAAKC,GACbC,EAAID,KAGR,CACEN,KAAM,eACNC,KAAM,4EACNC,OAAQ,qGACRC,OAJF,SAISC,EAAGC,EAAKC,GACbA,EAAOE,SAASC,KAAK,YAGzB,CACET,KAAM,eACNC,KAAM,sBACNS,WAAW,EACXR,OAAQ,4CACRC,OALF,SAKSC,EAAGC,EAAKC,GACbA,EAAOK,OAAS,IAGtB,CACIX,KAAM,2BACNC,KAAM,sBAENC,OAAQ,4CACRC,OALJ,SAKWC,EAAGC,EAAKC,GACbA,EAAOK,OAAS,IAGtB,CACIX,KAAM,eACNC,KAAM,yDAENC,OAAQ,wHACRC,OALJ,SAKWC,EAAGC,EAAKC,GACbA,EAAOE,SAAW,KAGtB,CACER,KAAM,qBACNC,KAAM,0DACNC,OAAQ,wGACRC,OAJF,SAISC,EAAGC,EAAKC,GACb,IAAIM,EAAMR,EAAES,QAAQC,QAAQR,GACxBS,GAAaH,EAAM,GAAK,EACxBI,GAAaJ,EAAM,GAAK,EAC5BR,EAAES,QAAQE,GAAWJ,OAAS,EAC9BP,EAAES,QAAQG,GAAWL,OAAS,IAGlC,CACEX,KAAM,qBACNC,KAAM,gEACNC,OAAQ,oGACRC,OAJF,SAISC,EAAGC,EAAKC,GAGXW,EAAWb,EAAGC,EAAKC,EAAQ,CAAC,EAAE,EAAE,MAIxC,CACIN,KAAM,eACNC,KAAM,0DACNC,OAAQ,mGACRC,OAJJ,SAIWC,EAAGC,EAAKC,GAGXW,EAAWb,EAAGC,EAAKC,EAAQ,CAAC,EAAE,EAAE,MAIxC,CACIN,KAAM,eACNC,KAAM,0DACNC,OAAQ,yGACRC,OAJJ,SAIWC,EAAGC,EAAKC,GAIbW,EAAWb,EAAGC,EAAKC,EAAQ,CAAC,EAAE,EAAE,MAuCpC,CACEN,KAAM,eACNC,KAAM,8CACNS,WAAW,EACXR,OAAQ,2GACRC,OALF,SAKSC,EAAGC,EAAKC,GACbA,EAAOE,SAASC,KAAK,UAG3B,CACIT,KAAM,eACNC,KAAM,4BACNS,WAAW,EACXR,OAAQ,2GACRC,OALJ,SAKWC,EAAGC,EAAKC,GACbY,EAAKZ,EAAOa,KAAMb,EAAOc,QAG/B,CACIpB,KAAM,eACNC,KAAM,yFACNS,WAAW,EACXR,OAAQ,4GACRC,OALJ,SAKWC,EAAGC,EAAKC,GACb,IAAIe,EAAOH,EAAKZ,EAAOa,KAAMb,EAAOgB,cACxBC,GAARF,QAAoCE,GAAfF,EAAKlB,SAC5BqB,EAAQpB,EAAGC,EAAK,uDAAWgB,EAAKrB,KAAhB,oBAChBqB,EAAKlB,OAAOC,EAAGC,EAAKC,GACpBe,EAAKlB,OAAOC,EAAGC,EAAKC,MAI1B,CACEN,KAAM,eACNC,KAAM,sKACNS,WAAW,EACXR,OAAQ,oGACRC,OALF,SAKSC,EAAGC,EAAKC,GACb,IAAIe,EAAOf,EAAOa,KAAK,GACvB,QAAYI,GAARF,EAAmB,CAErB,GADAG,EAAQpB,EAAGC,EAAK,yEAAcgB,EAAKrB,SAClB,gBAAbqB,EAAKrB,KAIP,OAHAkB,EAAKZ,EAAOa,KAAMb,EAAOgB,YAQjC,CACEtB,KAAM,eACNC,KAAM,6KACNC,OAAQ,iGACRC,OAJF,SAISC,EAAGC,EAAKC,GACb,IAAImB,EAAYrB,EAAEe,KAAKO,MAAM,EAAG,GAChCpB,EAAOa,KAAOb,EAAOa,KAAKO,MAAM,GAChCpB,EAAOgB,QAAP,sBAAqBG,GAArB,YAAmCnB,EAAOgB,UAC1CE,EAAQpB,EAAGC,EAAK,+EAAeoB,EAAUE,KAAI,SAAAC,GAAC,OAAI,iCAAOA,EAAE5B,KAAT,cAC9CyB,EAAUE,KAAI,SAAAC,GAAC,OAAIA,EAAE5B,QAAM6B,SAAS,gBACtCtB,EAAID,GAGJA,EAAOK,OAAS,IAKtB,CACEX,KAAM,eACNC,KAAM,0DACNC,OAAQ,qGACRC,OAJF,SAISC,EAAGC,EAAKC,GACbA,EAAOa,KAAP,sBAAkBf,EAAEe,KAAKO,MAAM,EAAE,IAAjC,YAAwCpB,EAAOa,OAC/Cf,EAAEe,KAAOf,EAAEe,KAAKO,MAAM,MC3MfI,EAAU,CACvB,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,4CACA,6CAGaC,EAAc,sGCP3B,SAASC,EAAqB1B,EAAiB2B,GAC7C,IAAIC,EAAY5B,EAAOE,SAAS2B,QAAO,SAAAP,GAAC,MAAkB,iBAALA,GAAmBA,EAAEQ,OAASH,KAAaI,OAChG,GAAIH,GAAa,EACf5B,EAAOK,OAAS,OAEb,GAAiB,GAAbuB,EACP5B,EAAOK,OAAS,MAEb,IAAiB,GAAbuB,EAIP,OAHA5B,EAAOK,OAAS,GAwBb,IA6HM2B,EA7HqB,CAChC,CACEtC,KAAM,yCACNC,KAAM,kFACNsC,WAAW,EACXpC,OAJF,SAISC,EAAGC,EAAKC,GACb,IACIkC,GADapC,EAAES,QAAQC,QAAQR,GACJ,GAAK,EAGlB,GAFLF,EAAES,QAAQ2B,GAEZjC,MACTD,EAAOK,OAAS,KAIxB,CACIX,KAAM,yCACNC,KAAM,kFACNsC,WAAW,EACXpC,OAJJ,SAIWC,EAAGC,EAAKC,GACb,IACIkC,GADapC,EAAES,QAAQC,QAAQR,GACJ,GAAK,EAGlB,GAFLF,EAAES,QAAQ2B,GAEZjC,MACTD,EAAOK,OAAS,KAKxB,CACIX,KAAM,yCACNC,KAAM,uHACNE,OAHJ,SAGWC,EAAGC,EAAKC,GACb,IACIkC,GADapC,EAAES,QAAQC,QAAQR,GACJ,GAAK,EAGlB,GAFLF,EAAES,QAAQ2B,GAEZjC,IACTD,EAAOK,OAAS,EAGhBL,EAAOK,OAAS,IAKtB,CACEX,KAAM,yCACNC,KAAM,uHACNE,OAHF,SAGSC,EAAGC,EAAKC,GACb,IACIkC,GADapC,EAAES,QAAQC,QAAQR,GACJ,GAAK,EAElB,GADLF,EAAES,QAAQ2B,GACZjC,IACTD,EAAOK,OAAS,EAGhBL,EAAOK,OAAS,IAKtB,CACEX,KAAM,mCAENC,KAAM,iGACNE,OAJF,SAISC,EAAGC,EAAKC,GACb0B,EAAqB1B,EAAQ,KAGnC,CACIN,KAAM,6BAENC,KAAM,2FACNE,OAJJ,SAIWC,EAAGC,EAAKC,GACb0B,EAAqB1B,EAAQ,KAGnC,CACIN,KAAM,mCAENC,KAAM,2FACNE,OAJJ,SAIWC,EAAGC,EAAKC,GACb0B,EAAqB1B,EAAQ,KAGjC,CACEN,KAAM,6BACNC,KAAM,mGACNE,OAHF,SAGSC,EAAGC,EAAKC,GACb,IAAImC,EAAenC,EAAOc,KAAKiB,OAC/B,GAAoB,GAAhBI,EACFnC,EAAOK,OAAS,MAEb,MAAI8B,GAAgB,GAIvB,OAHAnC,EAAOK,OAAS,KAOtB,CACEX,KAAM,+CACNC,KAAM,sGACNE,OAHF,SAGSC,EAAGC,EAAKC,QAEDiB,GADDjB,EAAOgB,QAAQoB,MAAK,SAAAd,GAAC,MAAc,gBAAVA,EAAE5B,UAEpCM,EAAOK,OAAS,KAItB,CACEX,KAAM,6BACNC,KAAM,sGACNE,OAHF,SAGSC,EAAGC,EAAKC,QAEDiB,GADDjB,EAAOgB,QAAQoB,MAAK,SAAAd,GAAC,MAAc,gBAAVA,EAAE5B,UAEpCM,EAAOK,OAAS,MAMOgB,KA9I/B,SAAsBgB,GACpB,OAAO,2BACFA,GADL,IAEEC,SAAS,EACT1C,OAAQ6B,OA4INc,EAAqB,SAACC,EAAwBnC,GAAzB,OAA2C,SAACP,EAAUC,EAAUC,EAAiByC,GAC1G,GAAIA,IAASA,EAAKC,YAAlB,CACE,IAAIC,EAAS3C,EAAOE,SAAS0C,QAAO,SAACC,EAAKC,GACxC,GAAkB,iBAAPA,EAAiB,CAC1B,IAAIC,EAAO,YAAOF,GAElB,OADAE,EAAQD,EAAIhB,QAAU,EACfiB,EAGP,OAAOF,IAER,CAAC,EAAE,EAAE,IACJG,EAAQL,EAAOtB,KAAI,SAAC4B,EAAK3C,GAAN,OAAe2C,EAAMT,EAAalC,IAAS,KAC9D4C,GAASF,EAAMzB,UAAS,GAC5B4B,QAAQC,IAAR,YAAiBJ,EAAjB,eAA6BL,EAA7B,eAA0CO,IACtCA,IACFlD,EAAOK,OAASA,EAChBoC,EAAKC,aAAc,EACnB5C,EAAEuD,SAASC,QAAQ,qBA+CZC,EAvC4B,CACvC,CACE7D,KAAM,oCACNC,KAAM,MACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,IAEtC,CACE7C,KAAM,oCACNC,KAAM,MACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,IAEtC,CACE7C,KAAM,oCACNC,KAAM,MACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,IAEtC,CACE7C,KAAM,oCACNC,KAAM,MACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,IAEtC,CACE7C,KAAM,oCACNC,KAAM,OACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,IAEtC,CACE7C,KAAM,oCACNC,KAAM,OACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,IAEtC,CACE7C,KAAM,oCACNC,KAAM,OACNE,OAAQ0C,EAAmB,CAAC,EAAE,EAAE,GAAI,KAKKlB,KAzM7C,SAA6BgB,GAC3B,OAAO,2BACFA,GADL,IAEEC,SAAS,EACTkB,WAAW,EACX5D,ODpB8B,8GEE3B,SAASgB,EAAK6C,EAAgBC,GAEnC,IAAI3C,EAAO0C,EAAME,OAAO,EAAG,GAAG,GAC9B,OAAI5C,GACF2C,EAAMJ,QAAQvC,GACPA,QAGP,EAgBJ,SAAS6C,IAkBP,MAjBmB,CACjBvD,MAAO,EACPS,KAAM,GACND,KAAM,GACNG,QAAS,GACT6C,MAAO,GAEP3D,SAAU,CAAC,QAEX4D,qBAAiB7C,EAEjB8C,UAAU,EACV9D,KAAK,GAQT,IA4BM+D,EAAmB,SAAClE,EAAGC,GAE3BD,EAAEmE,MAAQ,QACVnE,EAAEoE,OAAS,EACXpE,EAAEe,KAjEJ,SAAmBd,GAAoB,IAAD,IAGhCc,EADS,sBAAOsD,IAAEC,MAAM,GAAG,iBAAM,mBAAxB,YAAkCD,IAAEC,MAAM,GAAG,iBAAM,mBAAnD,YAA6DD,IAAEC,MAAM,GAAG,iBAAM,mBAA9E,YAAwFD,IAAEC,MAAM,GAAG,iBAAI,+BAAvG,YAAmHD,IAAEC,MAAM,GAAG,iBAAM,mBAApI,YAA6ID,IAAEC,MAAM,GAAG,iBAAM,mBAA9J,YAAuKD,IAAEC,MAAM,GAAG,iBAAM,mBAAxL,YAAiMD,IAAEC,MAAM,GAAG,iBAAM,mBAAlN,YAA2ND,IAAEC,MAAM,GAAG,iBAAM,mBAA5O,YAAqPD,IAAEC,MAAM,GAAG,iBAAM,mBAAtQ,YAA+QD,IAAEC,MAAM,GAAG,iBAAM,yBAAhS,YAA0SD,IAAEC,MAAM,GAAG,iBAAM,yBAA3T,YAAqUD,IAAEC,MAAM,GAAG,iBAAM,mBAAtV,YAA+VD,IAAEC,MAAM,GAAG,iBAAM,mBAAhX,YAAyXD,IAAEC,MAAM,GAAG,iBAAI,oBAChY/C,KAAI,SAAA3B,GAAI,OAAID,EAAM2C,MAAK,SAAAd,GAAC,OAAIA,EAAE5B,MAAQA,QAAOmC,QAAO,SAAAP,GAAC,YAASL,GAALK,KAAgBD,KAAI,SAAAC,GAAC,sBAASA,MAHxE,cAInBT,GAJmB,IAIpC,2BAAuB,CAAC,IAAfE,EAAc,QACjBA,EAAKX,YACPW,EAAKe,MAAQ/B,EAAIsE,OAAQC,IAAI,GAAK,IANF,8BASpC,OAAO,UAAAvE,EAAIsE,cAAJ,eAAYE,QAAQ1D,KAASA,EAwD3B2D,CAAUzE,GACnBD,EAAE2E,aAAe3E,EAAE2E,YAAc,GAAK,EALH,oBAQhB3E,EAAES,SARc,IAQnC,2BAA8B,CAAC,IAAtBP,EAAqB,QAC5BA,EAAOa,KAAO,GACdb,EAAOc,KAAO,GACdd,EAAOgB,QAAU,GACjBhB,EAAOE,SAAW,CAAC,QACnBF,EAAOC,KAAM,EACbD,EAAO+D,UAAW,EAClB/D,EAAO8D,qBAAkB7C,GAfQ,+BAZZ,SAACnB,EAAGC,GAI3B,IAHA,IAAI8D,EAAQ9D,EAAIsE,OAAQE,QAAZ,sBAAwBvC,GAAxB,YAAkCA,EAAMH,QAAO,SAAAP,GAAC,OAAIA,EAAEW,gBAGzDyC,EAAE,EAAGA,EAAE5E,EAAES,QAAQwB,OAAQ2C,IACnB5E,EAAES,QAAQmE,GAChBb,MAAQA,EAAMzC,MAAM,EAAEsD,EAAG,EAAEA,EAAE,GAGtC5E,EAAE6E,aAAe5E,EAAIsE,OAAQE,QAAQhB,EAAalC,KAAI,SAAAuD,GAAC,kCAAOA,GAAP,IAAUlC,aAAa,QAAUtB,MAAM,EAAE,GAqBhGyD,CAAW/E,EAAGC,GA9CS,SAACD,EAAGC,GAAQ,oBAEhBD,EAAES,SAFc,IAEnC,2BAA8B,QACrBO,KAAOhB,EAAEe,KAAKO,MAAM,EAAG,GAC9BtB,EAAEe,KAAOf,EAAEe,KAAKO,MAAM,GAJW,+BA+CnC0D,CAAWhF,IAgCN,SAASa,EAAWb,EAASC,EAASC,EAAiB2C,GAC5D,IAAK,IAAI+B,EAAE,EAAGA,EAAE,EAAGA,IACjB,IAAK,IAAIK,EAAE,EAAGA,EAAEpC,EAAO+B,GAAIK,IACzB/E,EAAOE,SAASC,KAAK,CAAC2B,MAAO4C,IAH6C,oBAM7D5E,EAAE6E,cAN2D,IAM9E,2BAAiC,CAAC,IAAzBtC,EAAwB,QAC/BA,EAAKxC,OAAOC,EAAGC,EAAKC,EAAQqC,IAPgD,+BAqBhF,SAAS2C,EAAazE,EAAoB0E,GACxC,IAAIC,GAAYD,EAAc,GAAM1E,EAAQwB,OAC5C,OAAIxB,EAAQ2E,GAAUnB,SACbiB,EAAazE,EAAS2E,GAGtBA,EAIX,IAAMC,EAAc,SAACrF,EAAGC,EAAKqF,EAAkBC,EAAkBC,GAC/D,IAAIC,EAAczF,EAAES,QAAQ6E,GACxBrE,EAAOwE,EAAYzE,KAAKuE,GAC5BE,EAAYzE,KAAOyE,EAAYzE,KAAKe,QAAO,SAAAP,GAAC,OAAKA,GAAKP,KAEtCjB,EAAES,SAAS6E,EAAWE,GAAaxF,EAAES,QAAQwB,QACnDlB,KAAKyC,QAAQvC,GAEvBwE,EAAYzB,gBAAkBwB,GA6B1BE,EAA2C,SAAC1F,EAAGC,GACnD,IAAI0F,EAAQ3F,EAAES,QAAQc,KAAI,SAAArB,GAAM,OAAIA,EAAOc,QACvC4E,EAAMD,EAAM1D,OAGhB,GAA0B,GAFD0D,EAAM,GAAG1D,OAGhCoB,QAAQC,IAAI,kCAnBiB,SAACtD,EAAGC,GACnCD,EAAEmE,MAAQ,SADiC,oBAGxBnE,EAAES,SAHsB,IAG3C,2BAA8B,CAAC,IAAD,EAArBP,EAAqB,QAC5BA,EAAOa,MAAO,UAAAd,EAAIsE,cAAJ,eAAYE,QAAQvE,EAAOa,QAASb,EAAOa,KACzDb,EAAOa,KAAP,sBAAkBb,EAAOa,MAAzB,YAAkCb,EAAO6D,SALA,8BAQ3C/D,EAAE6F,YAAc,OAChB7F,EAAE8F,kBAAoB9F,EAAE2E,YAWtBoB,CAAmB/F,EAAGC,OAGnB,CACH0F,EAAK,CAAIA,EAAMC,EAAI,IAAd,mBAAqBD,EAAMrE,MAAM,EAAGsE,EAAI,KAC7C,IAAK,IAAIhB,EAAE,EAAGA,EAAEgB,EAAKhB,IACnB5E,EAAES,QAAQmE,GAAG5D,KAAO2E,EAAMf,GAb6B,oBAiBzC5E,EAAES,SAjBuC,IAiB3D,IAAI,EAAJ,qBAA6B,SACpBuF,QAAS,GAlByC,gCAgD7D,SAASC,EAAUC,GACjB,IAAIjF,EAAOiF,EAAcnF,KAAK,QAClBI,GAARF,IACFiF,EAAcnF,KAAOmF,EAAcnF,KAAKO,MAAM,GAC9C4E,EAAchF,QAAQsC,QAAQvC,IAI3B,SAASd,EAAID,GAClB,IAAIiG,EAAajG,EAAOE,SAASmB,KAAI,SAACC,EAAEhB,GAAH,MAAiB,UAALgB,EAAgBhB,OAAMW,KAAWY,QAAO,SAAAP,GAAC,YAASL,GAALK,KAAgB,GAC9G6B,QAAQC,IAAI,eAAgB6C,QACVhF,GAAdgF,EACFjG,EAAOE,SAAWF,EAAOE,SAAS2B,QAAO,SAACP,EAAEhB,GAAH,OAAYA,GAAO2F,MAG5D9C,QAAQC,IAAR,iBAAsBpD,EAAOK,MAA7B,kBACAL,EAAOC,KAAM,GA4BjB,IAIMiG,EAAgB,SAACpG,EAAGC,EAAKoG,GAC7B,GAAqB,WAAjBrG,EAAE6F,aAA4BQ,EAGhC,GA7JJ,SAAsBrG,GAEpB,YAAyBmB,GADDnB,EAAES,QAAQ6B,MAAK,SAAAd,GAAC,OAAKA,EAAEyC,YA4JzCqC,CAAatG,IARW,SAACA,EAAGC,GAClCiE,EAAWlE,EAAGC,GAQVsG,CAAkBvG,EAAGC,OAElB,CACH,IAAImF,EAAWF,EAAalF,EAAES,QAAST,EAAE8F,mBACzC9F,EAAE8F,kBAAoBV,EACtBpF,EAAE6F,YAAc,YAKlB7F,EAAE6F,YAAc,WAIdW,EAAa,SAACxG,EAAGC,EAAKwG,EAAoBC,GAE9C,GAAqB,QAAjB1G,EAAE6F,aAAyB7F,EAAE8F,mBAAqBW,EA2CpD,OAAOE,IA1CP,IAAIT,EAAgBlG,EAAES,QAAQT,EAAE8F,mBAC5BO,GAAU,EAEd,GAAmB,QAAfK,EAAuB,CACzB,IAAIE,EAAUV,EAAc9F,SAASkC,MAAK,SAAAd,GAAC,MAAS,QAALA,KAC/C,QAAeL,GAAXyF,EAUF,OAAOD,IATP,IAAIE,EAAcX,EAAc9F,SAASM,QAAQkG,GACjDX,EAAUC,GACVA,EAAc9F,SAASyD,OAAOgD,EAAa,GAC3CR,GAAU,EACVjF,EAAQpB,EAAGC,EAAJ,iCAUN,GAA2B,iBAAhByG,GAA4B,gBAAiBA,EAAa,CACxE,IAAII,EAAUZ,EAAclF,KAAK0F,EAAYK,aAC7C,QAAe5F,GAAX2F,EAKF,OAAOH,IAJPT,EAAclF,KAAOkF,EAAclF,KAAKe,QAAO,SAAAP,GAAC,OAAIA,GAAKsF,KACzDZ,EAAchF,QAAQsC,QAAQsD,QAShCb,EAAUC,GACV7C,QAAQC,IAAI,qBAAO4C,EAAchF,QAAQ,GAAGtB,MAC5CwB,EAAQpB,EAAGC,EAAJ,uBAAeiG,EAAchF,QAAQ,GAAGtB,OAGjDwG,EAAQpG,EAAGC,EAAKoG,IAQdW,EAAgB,SAAChH,EAAGC,EAAKwG,EAAoBQ,GACjD,GAAIR,GAAczG,EAAE8F,kBA8BlB,OAAOa,IA7BP,IAAIzG,EAASF,EAAES,QAAQT,EAAE8F,mBACrB7E,EAAOf,EAAOgB,QAAQ,GAE1B,GADAmC,QAAQC,IAAR,UAAemD,EAAf,kBACsB,SAAlBQ,EAA2B,CAE7B,GADA5D,QAAQC,IAAI,wBACMnC,GAAdF,EAAKe,MAQP,OAAO2E,IANP,IAAIO,EAAQ,CAAC,EAAE,EAAE,GACjBA,EAAMjG,EAAKe,OAAS,EACpBnB,EAAWb,EAAGC,EAAKC,EAAQgH,GAC3B9F,EAAQpB,EAAGC,EAAJ,iBAAcgB,EAAKrB,KAAnB,mCAOTyD,QAAQC,IAAR,uBAA4BrC,EAAKrB,OACjCyD,QAAQC,IAAR,eAAgBrC,IAChBA,EAAKlB,QAAUkB,EAAKlB,OAAOC,EAAGC,EAAKC,EAAQe,GAC3CG,EAAQpB,EAAGC,EAAJ,uBAAegB,EAAKrB,OAI7BM,EAAO+D,SAAY/D,EAAOC,KAA8B,GAAtBD,EAAOa,KAAKkB,OAE9CmE,EAAQpG,EAAGC,IA2BFmB,EAAgB,SAACpB,EAAGC,EAAKkH,GACpCnH,EAAEuD,SAASC,QAAQ2D,IAGRC,EAAO,CAClBC,MAhUF,SAAepH,GAAkB,IAAD,EACxBD,EAAW,CACfe,KAAM,GACNN,QAAS4D,IAAEC,MAvGK,EAuGcR,GAC9Be,aAAc,GAEdyC,QAAS,GACTlD,OAAQ,EACRO,cAAc,UAAA1E,EAAIsE,cAAJ,eAAYC,IA5GV,KA4G8B,GAAK,EACnDsB,kBAAmB,EACnBD,YAAa,QAEb1B,MAAO,QAEPoD,KAAM,EACNC,WAAY,CAAC,EAAE,EAAE,EAAE,GAAGlG,MAAMrB,EAAIwH,YAChClE,SAAU,IASZ,OApEwB,SAACvD,EAAGC,GAG5B,IAFA,IAAI2F,EAAM5F,EAAES,QAAQwB,OAChByF,EAAUzH,EAAIsE,OAAQE,QAAQ/C,GAASJ,MAAM,EAAGsE,GAC3ChB,EAAE,EAAGA,EAAEgB,EAAKhB,IACnB5E,EAAES,QAAQmE,GAAG9E,OAAS4H,EAAQ9C,GA0DhC+C,CAAY3H,EAAGC,GAEfiE,EAAWlE,EAAGC,GAEdoD,QAAQC,IAAR,uBAA4BrD,EAAIwH,WAAhC,YAA8CzH,EAAEwH,aAEzCxH,GAwSP4H,MAAO,CACLC,WAnMqB,SAAC7H,EAAGC,EAAK6H,GAChC9H,EAAEsH,QAAQjH,KAAKyH,GACf9H,EAAES,QAAQqH,EAAOxC,UAAUU,QAAS,EAGrB8B,EAAOxC,UACNtF,EAAEuH,MA/DG,SAACvH,EAAGC,GAAS,IAAD,gBACjBD,EAAEwH,YADe,IACjC,2BAA8B,CAAC,IAAtBhH,EAAqB,QAExB+E,EAAWtF,EAAIsE,OAAQC,IAAIxE,EAAES,QAAQD,GAAKQ,KAAKiB,QAAU,EACzDuD,EAAYvF,EAAIsE,OAAQC,IAAIxE,EAAES,QAAQwB,QAAU,EACpDjC,EAAEsH,QAAQjH,KAAK,CACbiF,SAAU9E,EACV+E,WACAC,eAR6B,+BAgE/BuC,CAAS/H,EAAGC,GAEdoD,QAAQC,IAAR,0BAA+BtD,EAAEsH,QAAQrF,SAGrCjC,EAAEsH,QAAQrF,QAAUjC,EAAES,QAAQwB,QArBR,SAACjC,EAAGC,GAAS,IAAD,gBACnBD,EAAEsH,SADiB,IACtC,2BAA8B,CAAC,IAAtBQ,EAAqB,QAC5BzC,EAAMrF,EAAGC,EAAK6H,EAAOxC,SAAUwC,EAAOvC,SAAUuC,EAAOtC,YAFnB,8BAItCxF,EAAEsH,QAAU,GAEZ5B,EAAmC1F,EAAGC,GAgBpC+H,CAAchI,EAAGC,IAuLjBuG,OACAQ,UACAiB,OA9BiB,SAACjI,EAAGC,EAAKqF,GAC5B,IAAItF,EAAEwH,WAAW/F,SAASzB,EAAE8F,oBAAuB9F,EAAEuH,MAAQjC,EAe3D,OAAOqB,IAdP,GAAqB,QAAjB3G,EAAE6F,YAAuB,CAG3BW,EAAKxG,EAAGC,EAAKD,EAAE8F,kBADe,YAG3B,IAAqB,WAAjB9F,EAAE6F,YAKT,OAAOc,IAHPK,EAAQhH,EAAGC,EAAKD,EAAE8F,kBADkB,aAuBtC1E,WAEF8G,WAAY,EACZC,WAAY,EACZC,KAAM,CACJC,cAAeC,IAAcC,M,gBCtb3BC,G,MAAc,CAClBC,OAAQ,OACRC,MAAO,UAGIC,EAAqB,CAChC,oGACA,mGACA,0GACApH,KAAI,SAAAqH,GAAG,OAAI,qBAAKA,IAAKA,EAAKC,MAAOL,OAEtBM,EAAc,qBAAKF,IAAI,qGAAqGC,MAAOL,IAEnIO,EAAY,qBAAKH,IAAI,2GAA2GC,MAAOL,IChB7I,SAASQ,IACd,MAAO,CACLC,MAAO,YACPxC,WAAY,EACZnD,IAAK,IAuCF,SAAS4F,EAAelJ,EAAUmJ,GACvC,IAAIjJ,EAASF,EAAES,QAAQ0I,EAAE1C,YACzB,GAAe,SAAXzG,EAAEmE,MACJ,OAAKjE,EAAO8F,aAA6B7E,GAAnBgI,EAAEC,cAIf,GAjCb,SAA8B9D,EAAkBC,GAC9C,IACI8D,EAAQ,CAAC,eAAM,eAAM,eAAM,gBAE/B,MAHiB,CAAC,EAAG,EAAG,EAAG,GAGT9H,KAAI,SAACiE,EAAWhF,GAAZ,MAAqB,CACzCZ,KAAMyJ,EAAM7I,GACZsH,OAAQ,mBACRwB,KAAM,CAAChE,EAAUC,EAAUC,OAuBlB+D,CAAqBJ,EAAE1C,WAAY0C,EAAEC,eAO9C,GAAIpJ,EAAE8F,mBAAqBqD,EAAE1C,WAAY,CACvC,GAAqB,QAAjBzG,EAAE6F,YAAuB,CAC3B,IAAI2D,EAA6B,CAC/B,CAAC5J,KAAM,eAAMkI,OAAQ,OAAQwB,KAAM,CAACH,EAAE1C,WAAY,UAQpD,OANIvG,EAAOE,SAASqB,SAAS,SAC3B+H,EAAanJ,KAAK,CAACT,KAAM,eAAMkI,OAAQ,OAAQwB,KAAM,CAACH,EAAE1C,WAAY,UAEjEvG,EAAOc,KAAKiB,OAAS,QAA0Bd,GAAnBgI,EAAEC,eACjCI,EAAahG,QAAQ,CAAC5D,KAAM,2BAAQkI,OAAQ,OAAQwB,KAAM,CAACH,EAAE1C,WAAY,CAACM,YAAaoC,EAAEC,kBAEpFI,EAGP,IAAIC,EAAgC,CAClC,CAAC7J,KAAM,eAAMkI,OAAQ,UAAWwB,KAAM,CAACH,EAAE1C,WAAY,aAMvD,YAHsBtF,GADPjB,EAAOgB,QAAQ,GACjBc,OACXyH,EAAgBpJ,KAAK,CAACT,KAAM,2BAAQkI,OAAQ,UAAWwB,KAAM,CAACH,EAAE1C,WAAY,WAEvEgD,EAIT,OAAIN,EAAE1C,YAAczG,EAAEuH,MAAQvH,EAAEwH,WAAW/F,SAASzB,EAAE8F,mBAC7C,CACL,CACElG,KAAM,eACNkI,OAAQ,SACRwB,KAAM,CAACH,EAAE1C,cAKN,GAMf,IAcMrF,EAAkB,SAAC+H,EAAGhC,GAC1BgC,EAAE7F,IAAM6D,GAGGuC,EAAkC,CAC7CC,YAnB0B,SAACR,EAAG3I,EAAaQ,IAvFR,SAACmI,EAAG3I,GACnC2I,EAAEC,eAAiB5I,EACrB2I,EAAEC,mBAAgBjI,EAGlBgI,EAAEC,cAAgB5I,EAmFpBoJ,CAAqBT,EAAG3I,GACxB,IAAIS,EAAOD,EAAKR,GAChBY,EAAQ+H,EAAG,iCAAOlI,EAAKrB,KAAZ,KAAoBqB,EAAKpB,UAiBpCgK,YAd0B,SAACV,GAC3BA,EAAEC,mBAAgBjI,GAclB2I,aAX2B,SAACX,EAAGF,GAC/BE,EAAEF,MAAQA,GAWV7H,WCxHK,SAAS2I,EAAgBC,EAAiCC,GAC/D,IAAIC,EAA4B,GAEhC,IAAK,IAAIC,KAAKF,EACZC,EAAQC,GAAKH,EAAGC,EAAIE,GAAIA,GAG1B,OAAOD,ECLT,IAuBaE,EAA2C,CACtDC,iBAxBuC,SAACzC,EAAON,EAAShC,EAAkBC,EAAkBC,GAC5FoC,EAAMC,WAAW,CAACvC,WAAUC,WAAUC,cACtC8B,EAAQuC,eAuBR5B,OApB6B,SAACL,EAAON,EAAShC,GAC9CsC,EAAMK,OAAO3C,IAoBbkB,KAjB2B,SAACoB,EAAON,EAASb,EAAoBC,GAChEkB,EAAMpB,KAAKC,EAAYC,IAiBvBM,QAb8B,SAACY,EAAON,EAASb,EAAoBQ,GACnEW,EAAMZ,QAAQP,EAAYQ,KCA5B,SAASqD,EAASC,GAChB,OAAO,sBAAKC,UAAU,YAAf,UACL,wBAAQA,UAAU,oBAAoBC,QAASF,EAAMG,UAArD,sCACCH,EAAMI,aAIX,SAASC,EAASL,GAChB,OAAO,qBAAKC,UAAU,YAAf,SACL,qBAAKA,UAAU,WAAf,SACGD,EAAMM,YAKb,SAASC,EAASP,GAChB,OAAO,qBAAKC,UAAU,YAAf,SACL,cAACO,GAAD,eAAUR,EAAMS,eAIpB,SAASC,EAAUV,GAGjB,OAAO,sBAAKC,UAAU,aAAf,UACL,cAACI,EAAD,CAAUC,QAASN,EAAMM,UACzB,cAACC,EAAD,CAAUE,WAAYT,EAAMS,gBAIhC,SAASE,EAAOX,GACd,OAAO,qBAAKC,UAAU,SAAS3B,MAAO,CAACsC,OAAQZ,EAAMa,SAAU,oBAAqBb,EAAMpK,IAAK,yBAAoBgB,GAA5G,SACL,qBAAKyH,IAAK2B,EAAMzK,OAAQ0K,UAAU,iBAItC,SAASa,GAASd,GAChB,OAAO,qBAAKC,UAAU,YAAY3B,MAAO,CAACyC,MAAuB,sBAAff,EAAMgB,QAAgB,eAAUpK,GAA3E,SACJoJ,EAAMgB,UAWX,SAASC,GAAWjB,GAClB,OAAO,sBAAKC,UAAU,cAAf,UACL,cAACU,EAAD,CAAQpL,OAAQyK,EAAMzK,OAAQsL,SAAUb,EAAMa,SAAUjL,IAAKoK,EAAMpK,MACnE,cAACkL,GAAD,CAAUE,QAAO,UAAKhB,EAAM3K,KAAX,YAAmB2K,EAAMhK,MAAzB,aACjB,cAAC8K,GAAD,CAAUE,QAAShB,EAAMkB,UAI7B,SAASC,GAAOnB,GACd,OAAO,sBAAKC,UAAU,SAAf,UACL,cAACS,EAAD,CAAWJ,QAASN,EAAMoB,WAAW5K,KAAKkB,OAAQ+I,WAAYT,EAAMoB,WAAWzK,QAAQ,KACvF,cAACsK,GAAD,eAAgBjB,EAAMoB,gBAI1B,SAASC,GAAQrB,GACf,OAAO,qBAAKC,UAAU,UAAf,SACJD,EAAM9J,QAAQc,KAAI,SAAArB,GAAM,OAEvB,aADF,CACGwL,GAAD,CAAQC,WAAYzL,SAK1B,SAAS2L,GAAUtB,GAGjB,OADAuB,qBAAU,kBAAIzI,QAAQC,IAAIiH,EAAMjH,OAAM,CAACiH,EAAMjH,MACtC,qBAAKkH,UAAU,aAAf,SACJD,EAAMjH,MAIX,SAASyI,GAAWxB,GAElB,IAAIyB,EAAQzB,EAAM0B,WAAW,GACzBC,EAAWF,GAAwB,gBAAdA,EAAMpM,KAC/BkM,qBAAU,WACR,GAAgB,GAAZI,EAAJ,CACE,IAAIC,EAAY5B,EAAM0B,WAAW,GACjC5I,QAAQC,IAAR,6BAAkCiH,EAAMvK,EAAE8F,kBAA1C,YAA+DyE,EAAMvK,EAAE6F,cACvEuG,YAAW,WAAK,IAAD,GACb,EAAA7B,EAAM8B,UAASF,EAAUrE,QAAzB,oBAAqCqE,EAAU7C,MAAQ,OACtD,QAKJ,CAACiB,EAAMvK,EAAE8F,kBAAmByE,EAAMvK,EAAE6F,cAEvC,IAAIoG,EAAcC,EAAW,GAAK3B,EAAM0B,WAExC,OAAO,qBAAKzB,UAAU,aAAf,SACJyB,EAAW1K,KAAI,SAAA4K,GAAS,OACvB,wBAAQ3B,UAAU,oBAAoBC,QAAS,wBAAM,EAAAF,EAAM8B,UAASF,EAAUrE,QAAzB,oBAAqCqE,EAAU7C,MAAQ,MAA5G,SAAmH6C,EAAUvM,YAKnI,SAASmL,GAAKR,GACZ,OAAO,sBAAKC,UAAU,OAAf,UACL,qBAAKA,UAAU,mBAAf,SACE,qBAAKA,UAAU,SAAS5B,IAAK2B,EAAMzK,WAErC,qBAAK0K,UAAU,aAAa3B,MAAO,CAACyD,aAAwBnL,GAAfoJ,EAAMvI,WAAoBb,EAAU,QAAjF,cAA2GA,GAAfoJ,EAAMvI,MAAqB2G,EAAO4B,EAAMvI,OAAS,QAIjJ,SAASuK,GAAchC,GACrB,OAAO,qBACLC,UAAY,iBACZ3B,MAAS,CAACsC,OAA+B,GAAvBZ,EAAMtJ,KAAKmK,SAAkB,yBAAoBjK,GACnEsJ,QAAWF,EAAMiC,YAHZ,SAKL,cAACzB,GAAD,eAAUR,EAAMtJ,SAIpB,SAASwL,GAAQlC,GACf,OAAO,qBAAKC,UAAU,WAAf,SACJD,EAAMmC,MAAMnL,KAAI,SAACN,EAAMT,GAAP,OAAe,cAAC+L,GAAD,CAAetL,KAAMA,EAAMuL,YAAajC,EAAMoC,gBAAgBnM,UAgBlG,SAASoM,GAAgB1M,EAAiBF,EAAUmJ,GAClD,MAAe,SAAXnJ,EAAEmE,WAC0BhD,GAA1BjB,EAAO8D,iBACShE,EAAES,QAAQC,QAAQR,GAAUA,EAAO8D,iBAAmB,GACtDmF,EAAE1C,YAAwC,GAA1BvG,EAAO8D,gBAChC,qBAGA,CAAC,2BAAQ,2BAAQ,2BAAQ,4BAAS9D,EAAO8D,iBAI3C,2BAIL9D,EAAO+D,SACL/D,EAAOC,IACF,qBAGA,qBAIFD,EAAOE,SAASmB,KAAI,SAAAsL,GAAM,OJrKhC,SAAyBA,GAC9B,MAAqB,iBAAVA,EACFlE,EAAOkE,EAAO7K,OAEJ,UAAV6K,EACA/D,EAGAC,EI6JgC+D,CAAgBD,MAK3D,SAASE,GAAavM,EAAaiG,GACjC,IAAIuG,EAAOxM,EAAMiG,EACjB,OAAIuG,EAAO,EACF,EAAIA,EAGJA,EAaX,SAASC,GAAU1C,GACjB,OAAO,sBAAKC,UAAU,QAAf,UACL,cAACoB,GAAD,CACEnL,SF3MqByM,EE2MF3C,EAAMvK,EAAES,QAAQc,KAAI,SAACrB,EAAQM,GAAT,OAZ7C,SAAwBN,EAAiBM,EAAaR,EAAUmJ,GAC9D,OAAO,2BACFjJ,GADL,IAEEN,KAAM,CAAC,eAAM,eAAM,eAAM,gBAAMmN,GAAavM,EAAK2I,EAAE1C,aACnDgF,KAAMmB,GAAgB1M,EAAQF,EAAGmJ,GACjCiC,SAAsB,UAAXpL,EAAEmE,OAAuB3D,GAAOR,EAAE8F,oBAOaqH,CAAejN,EAAQM,EAAK+J,EAAMvK,EAAGuK,EAAMpB,MF3MnEiE,EE2MwE,EAAE7C,EAAMpB,EAAE1C,WAAW,GAAG,GAAG8D,EAAMpB,EAAE1C,WAAW,GAAG,GAAG8D,EAAMpB,EAAE1C,WAAW,GAAG,EAAE8D,EAAMpB,EAAE1C,YF1MzL2G,EAAQ7L,KAAI,SAAAf,GAAG,OAAI0M,EAAK1M,SE4M7B,cAACqL,GAAD,CAAWvI,IAAuB,SAAjBiH,EAAMvK,EAAEmE,MAAmBoG,EAAMpB,EAAE7F,IAAMiH,EAAMvK,EAAEuD,SAAS,KAI3E,cAACwI,GAAD,CACEE,WAAc/C,EAAeqB,EAAMvK,EAAGuK,EAAMpB,GAC5CkD,SAAY9B,EAAM8B,SAClBrM,EAAKuK,EAAMvK,IAEb,cAACyM,GAAD,CACEC,MAASnC,EAAMvK,EAAES,QAAQ8J,EAAMpB,EAAE1C,YAAYzF,KAAKO,KAvEhC4H,EAuEmDoB,EAAMpB,EAtExE,SAAClI,EAAMT,GAAP,mBAAC,eACHS,GADE,IAELmK,SAAUjC,EAAEC,eAAiB5I,OAqE3BmM,gBAAmB,SAAAnM,GAAG,OAAI,kBAAM+J,EAAMjD,QAAQqC,YAAYnJ,EAAK+J,EAAMvK,EAAES,QAAQ8J,EAAMpB,EAAE1C,YAAYzF,UAErG,cAACsJ,EAAD,CAAUK,UAAS,UAAK,qBAAM0C,KAAKC,MAAM/C,EAAMvK,EAAEoE,MAAM,KAApC,OAA0CmG,EAAMvK,EAAEoE,MAAQ,EAAI,EAA9D,UAAoEsG,UAAW,kBAAIH,EAAMjD,QAAQwC,aAAa,mBA1ErI,IAAwBX,EFhJG+D,EAAWE,EE8NtC,SAASG,GAAKhD,GACZ,IAAI5I,EAAuC,GAAxB4I,EAAMhI,KAAKmB,UAAoB,yGAAyG8J,EAC3J,OAAO,sBAAKhD,UAAU,OAAf,UACL,qBAAKA,UAAU,wBAAf,SACE,qBAAKA,UAAU,cAAc5B,IAAKjH,MAEpC,qBAAK6I,UAAU,sBAAf,SAEE,sBAAKA,UAAU,YAAf,UACGD,EAAMhI,KAAK3C,KAAK,uBAChB2K,EAAMhI,KAAK1C,aAMpB,SAAS4N,GAAoB5N,GAC3B,IAAI6N,EAAoC,CAACC,EAAEhF,EAAO,GAAIiF,EAAEjF,EAAO,GAAIkF,EAAElF,EAAO,IAC5E,OAAQ9I,EAAgBiO,MAAM,IAAIvM,KAAI,SAAAwM,GAAI,OAAIL,EAAcK,MAa9D,IAAMC,GAA0D,CAC9Df,aACAgB,UAZF,SAAmB1D,GACjB,OAAO,sBAAKC,UAAU,QAAf,UACL,sBAAKA,UAAU,kBAAf,UACGD,EAAMvK,EAAE6E,aAAa9C,QAAO,SAAAQ,GAAI,OAAKA,EAAKK,eAAarB,KAAI,SAAAgB,GAAI,OAAI,cAACgL,GAAD,CAAMhL,KAAM,CAAC3C,KAAM2C,EAAK3C,KAAMC,KAAK4N,GAAoBlL,EAAK1C,MAAO6D,UAAUnB,EAAKmB,gBACrJ6G,EAAMvK,EAAES,QAAQ8J,EAAMpB,EAAE1C,YAAY1C,MAAMxC,KAAI,SAAAgB,GAAI,OAAI,cAACgL,GAAD,CAAMhL,KAAM,CAAC3C,KAAM2C,EAAK3C,KAAMC,KAAK0C,EAAK1C,KAAM6D,UAAUnB,EAAKmB,mBAEtH,wBAAQ8G,UAAU,iBAAiBC,QAAS,kBAAMF,EAAMjD,QAAQwC,aAAa,cAA7E,+BCxOJ,IAAMoE,GAAaC,YAAO,CACxBC,KAAMhH,EACN6B,MD+OK,SAAesB,GAA6B,IAAD,EAChC8D,mBAAiBrF,GADe,mBAC3CG,EAD2C,KACxCmF,EADwC,KAE5ChH,EAAUyC,GACZ,SAAAjC,GAAM,OAAI,sCAAIwB,EAAJ,yBAAIA,EAAJ,uBAAoBgF,EAAKC,aAAQ,SAAApF,GAAC,OAAIrB,EAAM,WAAN,GAAOqB,GAAP,OAAaG,WAC7DI,GAEE2C,EAAWtC,GACb,SAAAjC,GAAM,OAAI,sCAAIwB,EAAJ,yBAAIA,EAAJ,uBAAoBxB,EAAM,WAAN,GAAOyC,EAAM3C,MAAON,GAApB,OAAgCgC,OAC9Dc,GAEGpK,EAAiBuK,EAAjBvK,EAAGC,EAAcsK,EAAdtK,IAAK2H,EAAS2C,EAAT3C,MACT4G,EAA0B,CAC5BxO,IAAGC,MAAK2H,QAAOuB,IAAG7B,UAAS+E,YAiC7B,OAfAP,qBAAU,WACO,SAAX9L,EAAEmE,OACJmD,EAAQwC,aAAa,eAEtB,CAAC9J,EAAEmE,QAEN2H,qBAAU,WACRwC,EAAK,2BAAInF,GAAL,IAAQ1C,WAAYgI,SAASlE,EAAMmE,UAAY,QACnDrL,QAAQC,IAAR,eAAgBiH,IAChBlH,QAAQC,IAAR,4BAAiCiH,EAAMmE,aACtC,KAE4CV,GAAO7E,EAAEF,QAAUgE,IAGrDuB,IC3RbG,OAAO,EACPC,YAAaC,cAGbpH,WAAY,IAYCqH,GATH,WACV,OAAO,qBAAKjG,MAAO,CAACyD,QAAS,QAAtB,SACL,cAAC4B,GAAD,CAAYQ,SAAS,SC3BVK,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d658b1a5.chunk.js","sourcesContent":["import React from 'react';\nimport { ICard } from './types';\nimport { move, out, log_msg, add_fruits } from './Game';\n\nexport const CARDS: ICard[] = [\n  {\n    name: \"炸弹\",\n    desc: \"嘣！\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/emojidex/112/bomb_1f4a3.png\",\n    effect(G, ctx, player) {\n      out(player);\n    },\n  },\n  {\n    name: \"护甲\",\n    desc: \"放入持续区，可抵挡1次出局\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/shield_1f6e1.png\",\n    effect(G, ctx, player) {\n      player.entities.push(\"shield\");\n    },\n  },\n  {\n    name: \"白嫖\",\n    desc: \"获得1分\",\n    has_fruit: true,\n    illust: \"https://s3.ax1x.com/2020/12/16/rQ2Eef.jpg\",\n    effect(G, ctx, player) {\n      player.score += 1;\n    },\n  },\n{\n    name: \"反向白嫖\",\n    desc: \"失去1分\",\n    // has_fruit: true,\n    illust: \"https://s3.ax1x.com/2020/12/27/r4zS8H.jpg\",\n    effect(G, ctx, player) {\n      player.score -= 1;\n    },\n  },\n{\n    name: \"裸奔\",\n    desc: \"弃掉持续区的所有牌\",\n    // has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/man-running_1f3c3-200d-2642-fe0f.png\",\n    effect(G, ctx, player) {\n      player.entities = [];\n    },\n  },\n  {\n    name: \"送温暖\",\n    desc: \"上家和下家各获得1分\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/271/pot-of-food_1f372.png\",\n    effect(G, ctx, player) {\n      let idx = G.players.indexOf(player);\n      let upper_idx = (idx + 1) % 4;\n      let lower_idx = (idx + 3) % 4;\n      G.players[upper_idx].score += 1;\n      G.players[lower_idx].score += 1;\n    }\n  },\n  {\n    name: \"西红柿\",\n    desc: \"将2个西红柿放入持续区\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/tomato_1f345.png\",\n    effect(G, ctx, player) {\n      // for (let i=0; i<2; i++){\n        // player.entities.push({fruit: 0});\n        add_fruits(G, ctx, player, [2,0,0]);\n      // }\n    }\n  },\n{\n    name: \"柠檬\",\n    desc: \"将2个柠檬放入持续区\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/lemon_1f34b.png\",\n    effect(G, ctx, player) {\n      // for (let i=0; i<2; i++){\n        // player.entities.push({fruit: 1});\n        add_fruits(G, ctx, player, [0,2,0]);\n      // }\n    }\n  },\n{\n    name: \"苹果\",\n    desc: \"将2个苹果放入持续区\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/green-apple_1f34f.png\",\n    effect(G, ctx, player) {\n      // for (let i=0; i<2; i++){\n      //   player.entities.push({fruit: 2});\n      // }\n      add_fruits(G, ctx, player, [0,0,2]);\n    }\n  },\n\n\n\n  // {\n  //   name: \"集体拆弹\",\n  //   desc: \"所有其他玩家弃掉牌库顶的1张牌，每有1个弃掉炸弹的玩家，就获得1分\",\n  //   illust: \"\",\n  //   effect(G, ctx, player) {\n  //     let other_players = G.players.filter(x => x != player);\n  //     for (let p of other_players) {\n\n  //     }\n  //   }\n  // },\n  // {\n  //   name: \"集体拆弹\",\n  //   desc: \"所有其他玩家弃掉牌库顶的1张牌，每有1个弃掉炸弹的玩家，就获得1分\",\n  //   illust: \"\",\n  //   effect(G, ctx, player) {\n  //     let other_players = G.players.filter(x => x != player);\n  //     for (let p of other_players) {\n\n  //     }\n  //   }\n  // },\n  // {\n  //   name: \"集体拆弹\",\n  //   desc: \"所有其他玩家弃掉牌库顶的1张牌，每有1个弃掉炸弹的玩家，就获得1分\",\n  //   illust: \"\",\n  //   effect(G, ctx, player) {\n  //     let other_players = G.players.filter(x => x != player);\n  //     for (let p of other_players) {\n\n  //     }\n  //   }\n  // },\n  {\n    name: \"鞋子\",\n    desc: \"获得1次跳过机会\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/running-shoe_1f45f.png\",\n    effect(G, ctx, player) {\n      player.entities.push(\"skip\");\n    }\n  },\n{\n    name: \"归档\",\n    desc: \"归档1张牌\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/whatsapp/273/floppy-disk_1f4be.png\",\n    effect(G, ctx, player) {\n      move(player.deck, player.hand);\n    },\n  },\n{\n    name: \"加速\",\n    desc: \"弃掉牌堆顶的1张牌，并执行其2次\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/271/racing-car_1f3ce-fe0f.png\",\n    effect(G, ctx, player) {\n      let card = move(player.deck, player.discard);\n      if (card != undefined && card.effect != undefined) {\n        log_msg(G, ctx, <span>执行了 {card.name} 两次</span>);\n        card.effect(G, ctx, player);\n        card.effect(G, ctx, player);\n      }\n    },\n  },\n  {\n    name: \"拆弹\",\n    desc: \"查看牌堆顶的1张牌，如果是炸弹，将其弃掉，否则放回牌库顶\",\n    has_fruit: true,\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/wrench_1f527.png\",\n    effect(G, ctx, player) {\n      let card = player.deck[0];\n      if (card != undefined) {\n        log_msg(G, ctx, <span>使用拆弹翻开 {card.name}</span>);\n        if (card.name == \"炸弹\") {\n          move(player.deck, player.discard);\n        }\n        else {\n          return;\n        }\n      }\n    }\n  },\n  {\n    name: \"引爆\",\n    desc: \"弃掉牌库顶的2张牌，如果其中有炸弹，则直接出局，否则获得1分\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/271/fire_1f525.png\",\n    effect(G, ctx, player) {\n      let discarded = G.deck.slice(0, 2);\n      player.deck = player.deck.slice(2);\n      player.discard = [...discarded, ...player.discard];\n      log_msg(G, ctx, <span>因为引爆弃掉了 {discarded.map(x => <span>{x.name} </span>)}</span>);\n      if (discarded.map(x => x.name).includes(\"炸弹\")) {\n        out(player);\n      }\n      else {\n        player.score += 1;\n      }\n    }\n  },\n\n  {\n    name: \"机会\",\n    desc: \"将2张山牌放到牌库顶\",\n    illust: \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/271/game-die_1f3b2.png\",\n    effect(G, ctx, player) {\n      player.deck = [...G.deck.slice(0,2), ...player.deck];\n      G.deck = G.deck.slice(2);\n    }\n  },\n\n];","export const AVATARS = [\n\"https://s1.ax1x.com/2020/11/08/BI5SKA.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5pDI.png\",\n\"https://s1.ax1x.com/2020/11/08/BI4xvd.png\",\n\"https://s1.ax1x.com/2020/11/08/BI4j8e.png\",\n\"https://s1.ax1x.com/2020/11/08/BI4vgH.png\",\n\"https://s1.ax1x.com/2020/11/08/BI59bt.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5PVP.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5iUf.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5F58.png\",\n\"https://s1.ax1x.com/2020/11/08/BI5APS.png\",\n];\n\nexport const goal_illust = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/beer-mug_1f37a.png\";\n\nexport const public_goal_illust = \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/green-salad_1f957.png\";","import { Ctx } from 'boardgame.io';\nimport React from 'react';\nimport { goal_illust, public_goal_illust } from './assets';\nimport { FRUITS } from './icons';\nimport { ICard, IGame, IPlayer } from './types';\n\nfunction score_based_on_fruit(player: IPlayer, fruit_idx: number) {\n  let num_fruit = player.entities.filter(x => ((typeof x == \"object\") && (x.fruit == fruit_idx))).length;\n  if (num_fruit >= 3) {\n    player.score += 6;\n  }\n  else if (num_fruit == 2) {\n    player.score += 3;\n  }\n  else if (num_fruit == 1) {\n    player.score += 1;\n  }\n  else {\n    return;\n  }\n}\n\nfunction process_goal(goal: ICard): ICard {\n  return {\n    ...goal,\n    is_goal: true,\n    illust: goal_illust,\n  };\n}\n\nfunction process_public_goal(goal: ICard): ICard {\n  return {\n    ...goal,\n    is_goal: true,\n    is_public: true,\n    illust: public_goal_illust,\n  };\n}\n\nexport const goals_raw: ICard[] = [\n  {\n    name: \"目标: 击杀上家\",\n    desc: \"如果上家已经出局，则获得3分\",\n    stackable: true,\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 3) % 4;\n      let target = G.players[target_idx];\n\n      if (target.out == true) {\n        player.score += 3;\n      }\n    }\n  },\n{\n    name: \"目标: 击杀下家\",\n    desc: \"如果下家已经出局，则获得3分\",\n    stackable: true,\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 1) % 4;\n      let target = G.players[target_idx];\n\n      if (target.out == true) {\n        player.score += 3;\n      }\n    }\n  },\n\n{\n    name: \"目标: 保护上家\",\n    desc: \"如果上家依然存活，则获得1分，否则失去1分\",\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 3) % 4;\n      let target = G.players[target_idx];\n\n      if (target.out != true) {\n        player.score += 1;\n      }\n      else {\n        player.score -= 1;\n      }\n    }\n  },\n\n  {\n    name: \"目标: 保护下家\",\n    desc: \"如果下家依然存活，则获得1分，否则失去1分\",\n    effect(G, ctx, player) {\n      let player_idx = G.players.indexOf(player);\n      let target_idx = (player_idx + 1) % 4;\n      let target = G.players[target_idx];\n      if (target.out != true) {\n        player.score += 1;\n      }\n      else {\n        player.score -= 1;\n      }\n    }\n  },\n\n  {\n    name: \"目标: 西红柿\",\n    // desc: <span>如果你拥有1/2/3个{FRUITS[0]}，则获得1/3/6分</span>,\n    desc: \"如果你拥有1/2/3个西红柿，则获得1/3/6分\",\n    effect(G, ctx, player) {\n      score_based_on_fruit(player, 0);\n    }\n  },\n{\n    name: \"目标: 柠檬\",\n    // desc: <span>如果你拥有1/2/3个{FRUITS[1]}，则获得1/3/6分</span>,\n    desc: \"如果你拥有1/2/3个柠檬，则获得1/3/6分\",\n    effect(G, ctx, player) {\n      score_based_on_fruit(player, 1);\n    }\n  },\n{\n    name: \"目标: 青苹果\",\n    // desc: <span>如果你拥有1/2/3个{FRUITS[2]}，则获得1/3/6分</span>,\n    desc: \"如果你拥有1/2/3个苹果，则获得1/3/6分\",\n    effect(G, ctx, player) {\n      score_based_on_fruit(player, 2);\n    }\n  },\n  {\n    name: \"目标: 归档\",\n    desc: \"如果你的存档中有1/2张牌，则获得2/5分\",\n    effect(G, ctx, player) {\n      let num_archives = player.hand.length;\n      if (num_archives == 1) {\n        player.score += 2;\n      }\n      else if (num_archives >= 2) {\n        player.score += 5;\n      }\n      else {\n        return;\n      }\n    }\n  },\n  {\n    name: \"目标: 玩个刺激的\",\n    desc: \"如果你的弃牌堆中有\\\"引爆\\\"，则获得2分\",\n    effect(G, ctx, player) {\n      let card = player.discard.find(x => x.name == \"引爆\");\n      if (card != undefined) {\n        player.score += 2;\n      }\n    }\n  },\n  {\n    name: \"目标: 机会\",\n    desc: \"如果你的弃牌堆中有\\\"机会\\\"，则获得2分\",\n    effect(G, ctx, player) {\n      let card = player.discard.find(x => x.name == \"机会\");\n      if (card != undefined) {\n        player.score += 2;\n      }\n    }\n  },\n];\n\nexport const GOALS = goals_raw.map(process_goal);\n\nconst check_requirements = (requirements: number[], score: number) => (G: IGame, ctx: Ctx, player: IPlayer, self?: ICard) => {\n  if (self && !self.is_achieved) {\n    let fruits = player.entities.reduce((acc, val) => {\n      if (typeof val == \"object\") {\n        let new_acc = [...acc];\n        new_acc[val.fruit] += 1;\n        return new_acc;\n      }\n      else {\n        return acc;\n      }\n    }, [0,0,0]);\n    let diffs = fruits.map((cnt, idx) => (cnt - requirements[idx]) >= 0);\n    let agari = !diffs.includes(false);\n    console.log(`D:${diffs}, F:${fruits}, A:${agari}`);\n    if (agari) {\n      player.score += score;\n      self.is_achieved = true;\n      G.gamelogs.unshift(\"和牌!\");\n    }\n  }\n  else {\n    return;\n  }\n}\n\nexport const public_goals_raw: ICard[] = [\n  {\n    name: \"公共目标(3分)\",\n    desc: \"AAA\",\n    effect: check_requirements([3,0,0], 3),\n  },\n  {\n    name: \"公共目标(3分)\",\n    desc: \"BBB\",\n    effect: check_requirements([0,3,0], 3),\n  },\n  {\n    name: \"公共目标(3分)\",\n    desc: \"CCC\",\n    effect: check_requirements([0,0,3], 3),\n  },\n  {\n    name: \"公共目标(4分)\",\n    desc: \"ABC\",\n    effect: check_requirements([1,1,1], 4),\n  },\n  {\n    name: \"公共目标(4分)\",\n    desc: \"AABB\",\n    effect: check_requirements([2,2,0], 4),\n  },\n  {\n    name: \"公共目标(4分)\",\n    desc: \"AACC\",\n    effect: check_requirements([2,0,2], 4),\n  },\n  {\n    name: \"公共目标(4分)\",\n    desc: \"BBCC\",\n    effect: check_requirements([0,2,2], 4),\n  },\n\n];\n\nexport const PUBLIC_GOALS = public_goals_raw.map(process_public_goal);","import React, { ReactNode as EL } from 'react';\nimport { ActivePlayers } from 'boardgame.io/core';\nimport _ from 'lodash';\nimport { Ctx, Move as GeneralMove } from 'boardgame.io';\nimport { INVALID_MOVE } from 'boardgame.io/core';\nimport { CARDS } from './cards';\n\nimport { IGame, ICard, IPlayer, IAction, FlipAction, ExecuteAction } from './types';\nimport { AVATARS } from './assets';\nimport { GOALS, PUBLIC_GOALS } from './goals';\n\n// No \"turn based\" stuffs are used\n\nconst NUM_PLAYERS = 4;\n\ntype Move = (G: IGame, ctx: Ctx, ...args: any[]) => any;\n\nexport function move(deck1: ICard[], deck2: ICard[]) {\n  // This time, only procedure method, works\n  let card = deck1.splice(0, 1)[0];\n  if (card) {\n    deck2.unshift(card);\n    return card\n  }\n  else {\n    return undefined;\n  }\n}\n\nfunction init_deck(ctx: Ctx): ICard[] {\n  // let deck_data = \"\".split(\" \")\n  let deck_data = [..._.times(6, () => \"炸弹\"), ..._.times(4, () => \"护甲\"), ..._.times(3, () => \"白嫖\"), ..._.times(2, ()=>\"反向白嫖\"), ..._.times(3, () => \"拆弹\"),..._.times(2, () => \"引爆\"),..._.times(1, () => \"加速\"),..._.times(3, () => \"归档\"),..._.times(2, () => \"鞋子\"),..._.times(1, () => \"裸奔\"),..._.times(2, () => \"送温暖\"),..._.times(1, () => \"西红柿\"),..._.times(1, () => \"柠檬\"),..._.times(1, () => \"苹果\"),..._.times(2, ()=>\"机会\"),];\n  let deck = deck_data.map(name => CARDS.find(x => x.name == name)).filter(x => x != undefined).map(x => ({...x})) as ICard[];\n  for (let card of deck) {\n    if (card.has_fruit) {\n      card.fruit = ctx.random!.Die(3) - 1;\n    }\n  }\n  return ctx.random?.Shuffle(deck) || deck;\n}\n\nfunction setup_player(): IPlayer {\n  const P: IPlayer = {\n    score: 0,\n    hand: [],\n    deck: [],\n    discard: [],\n    goals: [],\n\n    entities: [\"skip\"],\n\n    previous_action: undefined,\n\n    finished: false,\n    out: false,\n\n    // TODO: add goals\n  };\n\n  return P;\n}\n\nconst init_draft: Move = (G, ctx) => {\n  // After all cards are into the deck and deck is shuffled\n  for (let player of G.players) {\n    player.hand = G.deck.slice(0, 7);\n    G.deck = G.deck.slice(7);\n  }\n};\n\nconst add_avatars: Move = (G, ctx) => {\n  let len = G.players.length;\n  let avatars = ctx.random!.Shuffle(AVATARS).slice(0, len);\n  for (let i=0; i<len; i++) {\n    G.players[i].illust = avatars[i];\n  }\n}\n\nconst init_goals: Move = (G, ctx) => {\n  let goals = ctx.random!.Shuffle([...GOALS, ...GOALS.filter(x => x.stackable)]);\n\n  // Debug is 1, then change to 2\n  for (let i=0; i<G.players.length; i++) {\n    let player = G.players[i];\n    player.goals = goals.slice(2*i, 2*i+2);\n  }\n\n  G.public_goals = ctx.random!.Shuffle(PUBLIC_GOALS.map(g=>({...g, is_achieved: false}))).slice(0,1);\n}\n\nconst init_round: Move = (G, ctx) => {\n  // Reset the deck, pass the init player\n  G.phase = \"place\";\n  G.round += 1;\n  G.deck = init_deck(ctx);\n  G.init_player = (G.init_player + 1) % 4;\n\n  // Reset player data\n  for (let player of G.players) {\n    player.deck = [];\n    player.hand = [];\n    player.discard = [];\n    player.entities = [\"skip\"];\n    player.out = false;\n    player.finished = false;\n    player.previous_action = undefined;\n  }\n\n  init_goals(G, ctx);\n  init_draft(G, ctx);\n}\n\n// This is just for init\nfunction setup(ctx: Ctx): IGame {\n  const G: IGame = {\n    deck: [],\n    players: _.times(NUM_PLAYERS, setup_player),\n    public_goals: [],\n\n    actions: [],\n    round: -1,\n    init_player: (ctx.random?.Die(NUM_PLAYERS) || 1) - 1,\n    active_player_idx: 0,\n    next_action: \"place\",\n\n    phase: \"place\",\n\n    host: 0,\n    ai_players: [0,1,2,3].slice(ctx.numPlayers),\n    gamelogs: [],\n  };\n\n  add_avatars(G, ctx);\n\n  init_round(G, ctx);\n\n  console.log(`How many AI: ${ctx.numPlayers} ${G.ai_players}`);\n\n  return G;\n}\n\nexport function add_fruits(G:IGame, ctx:Ctx, player: IPlayer, fruits: number[]) {\n  for (let i=0; i<3; i++) {\n    for (let j=0; j<fruits[i]; j++) {\n      player.entities.push({fruit: i});\n    }\n  }\n  for (let goal of G.public_goals) {\n    goal.effect(G, ctx, player, goal);\n  }\n}\n\nfunction all_finished(G: IGame): boolean {\n  let unfinished_player = G.players.find(x => !x.finished);\n  if (unfinished_player != undefined) {\n    return false;\n  }\n  else {\n    return true;\n  }\n}\n\nfunction get_next_idx(players: IPlayer[], current_idx: number): number {\n  let next_idx = (current_idx + 1) % (players.length);\n  if (players[next_idx].finished) {\n    return get_next_idx(players, next_idx);\n  }\n  else {\n    return next_idx;\n  }\n}\n\nconst place: Move = (G, ctx, from_idx: number, card_idx: number, direction: number) => {\n  let from_player = G.players[from_idx];\n  let card = from_player.hand[card_idx];\n  from_player.hand = from_player.hand.filter(x => (x != card));\n\n  let to_player = G.players[(from_idx + direction) % G.players.length];\n  to_player.deck.unshift(card);\n\n  from_player.previous_action = direction;\n};\n\nconst ai_moves: Move = (G, ctx) => {\n  for (let idx of G.ai_players) {\n    // AI IMPLEMENT: card_idx and direction\n    let card_idx = ctx.random!.Die(G.players[idx].hand.length) - 1;\n    let direction = ctx.random!.Die(G.players.length) - 1;\n    G.actions.push({\n      from_idx: idx,\n      card_idx, \n      direction,\n    });\n  }\n};\n\nconst enter_action_phase: Move = (G, ctx) => {\n  G.phase = \"action\";\n\n  for (let player of G.players) {\n    player.deck = ctx.random?.Shuffle(player.deck) || player.deck;\n    player.deck = [...player.deck, ...player.goals];\n  }\n\n  G.next_action = \"flip\";\n  G.active_player_idx = G.init_player;\n};\n\n\nconst change_hands_or_enter_action_phase: Move = (G, ctx) => {\n  let hands = G.players.map(player => player.hand);\n  let len = hands.length;\n  let num_remained_cards = hands[0].length;\n\n  if (num_remained_cards == 0) {\n    console.log(\"Time to enter the action phase\");\n    enter_action_phase(G, ctx);\n  }\n\n  else {\n    hands = [hands[len-1], ...hands.slice(0, len-1)];\n    for (let i=0; i<len; i++) {\n      G.players[i].hand = hands[i];\n    }\n  }\n\n  for(let player of G.players) {\n    player.placed = false;\n  }\n};\n\nconst carry_actions: Move = (G, ctx) => {\n  for (let action of G.actions) {\n    place(G, ctx, action.from_idx, action.card_idx, action.direction);\n  }\n  G.actions = [];\n\n  change_hands_or_enter_action_phase(G, ctx);\n};\n\nconst add_action: Move = (G, ctx, action: IAction) => {\n  G.actions.push(action);\n  G.players[action.from_idx].placed = true;\n\n  // let host move\n  let from_idx = action.from_idx;\n  if (from_idx == G.host) {\n    ai_moves(G, ctx);\n  }\n  console.log(`Actions length: ${G.actions.length}`);\n\n  // Check whether it's full\n  if (G.actions.length == G.players.length) {\n    carry_actions(G, ctx);\n  }\n};\n\nfunction flip_card(active_player: IPlayer) {\n  let card = active_player.deck[0];\n  if (card != undefined) {\n    active_player.deck = active_player.deck.slice(1);\n    active_player.discard.unshift(card);\n  }\n}\n\nexport function out(player: IPlayer) {\n  let shield_idx = player.entities.map((x,idx) => (x == \"shield\")? idx : undefined).filter(x => x != undefined)[0];\n  console.log(\"Find shield:\", shield_idx);\n  if (shield_idx != undefined) {\n    player.entities = player.entities.filter((x,idx) => (idx != shield_idx));\n  }\n  else {\n    console.log(`Player ${player.score}分 is out`)\n    player.out = true;\n  }\n}\n\n// const enter_place_phase: Move = (G, ctx) => {\n//   G.phase = \"place\";\n//   // EH: Reconstruct this into reset instead of just copy all setup stuffs\n\n//   G.round += 1;\n//   G.init_player = (G.init_player + 1) % 4;\n\n//   for (let player of G.players) {\n//     G.deck = [...G.deck, ...player.discard, ...player.hand, ...player.deck];\n\n//     player.deck = [];\n//     player.hand = [];\n//     player.discard = [];\n//     player.entities = [\"skip\"];\n//     player.out = false;\n//     player.finished = false;\n//     player.previous_action = undefined;\n//   }\n\n//   G.deck = ctx.random!.Shuffle(G.deck);\n\n//   init_draft(G, ctx);\n// };\n\nconst enter_place_phase: Move = (G, ctx) => {\n  init_round(G, ctx);\n}\n\nconst proceed: Move = (G, ctx, skipped?: boolean) => {\n  if (G.next_action == \"execute\" || skipped) {\n    // Check whether end the action phase, or pass to the next player\n    // Or say that pass to the next player, and if there's nobody to pass, then enter the action phase\n    if (all_finished(G)) {\n      enter_place_phase(G, ctx);\n    }\n    else {\n      let next_idx = get_next_idx(G.players, G.active_player_idx);\n      G.active_player_idx = next_idx;\n      G.next_action = \"flip\";\n    }\n  }\n\n  else {\n    G.next_action = \"execute\";\n  }\n};\n\nconst flip: Move = (G, ctx, player_idx: number, flip_action: FlipAction) => {\n  // Double check is fine\n  if (G.next_action == \"flip\" && G.active_player_idx == player_idx) {\n    let active_player = G.players[G.active_player_idx];\n    let skipped = false;\n\n    if (flip_action == \"skip\") {\n      let skipper = active_player.entities.find(x => x == \"skip\");\n      if (skipper != undefined) {\n        let skipper_idx = active_player.entities.indexOf(skipper);\n        flip_card(active_player);\n        active_player.entities.splice(skipper_idx, 1);\n        skipped = true;\n        log_msg(G, ctx, `选择跳过`);\n        // G.active_player_idx = (G.active_player_idx + 1) % NUM_PLAYERS;\n        // G.next_action = \"flip\";\n      }\n      else {\n        return INVALID_MOVE;\n      }\n    }\n\n    // EH: Write this in \"utils\" to make it more haskell-styled\n    else if (typeof(flip_action) == \"object\" && \"archive_idx\" in flip_action) {\n      let archive = active_player.hand[flip_action.archive_idx];\n      if (archive != undefined) {\n        active_player.hand = active_player.hand.filter(x => x != archive);\n        active_player.discard.unshift(archive);\n      }\n      else {\n        return INVALID_MOVE;\n      }\n    }\n\n    // Normal flip goes here\n    else {\n      flip_card(active_player);\n      console.log(\"翻开牌\", active_player.discard[0].name);\n      log_msg(G, ctx, `翻开 ${active_player.discard[0].name}`);\n    }\n\n    proceed(G, ctx, skipped);\n    \n  }\n  else {\n    return INVALID_MOVE;\n  }\n};\n\nconst execute: Move = (G, ctx, player_idx: number, execute_action: ExecuteAction) => {\n  if (player_idx == G.active_player_idx) {\n    let player = G.players[G.active_player_idx];\n    let card = player.discard[0];\n    console.log(`${player_idx} is executing`);\n    if (execute_action == \"fruit\") {\n      console.log(\"Gonna add fruit\");\n      if (card.fruit != undefined) {\n        // player.entities.push({fruit: card.fruit});\n        let added = [0,0,0];\n        added[card.fruit] = 1;\n        add_fruits(G, ctx, player, added);\n        log_msg(G, ctx, `将 ${card.name} 作为水果`);\n      }\n      else {\n        return INVALID_MOVE;\n      }\n    }\n    else {\n      console.log(`Just execute ${card.name}`);\n      console.log({...card});\n      card.effect && card.effect(G, ctx, player, card);\n      log_msg(G, ctx, `执行 ${card.name}`);\n    }\n\n    // Check finished\n    player.finished = (player.out || (player.deck.length == 0));\n\n    proceed(G, ctx);\n  }\n  else {\n    return INVALID_MOVE;\n  }\n};\n\nconst ai_act: Move = (G, ctx, from_idx: number) => {\n  if (G.ai_players.includes(G.active_player_idx) && (G.host == from_idx)) {\n    if (G.next_action == \"flip\") {\n      // AI IMPLEMENT: Flip action and execute action\n      let flip_action: FlipAction = \"flip\"\n      flip(G, ctx, G.active_player_idx, flip_action);\n    }\n    else if (G.next_action == \"execute\") {\n      let execute_action: ExecuteAction = \"execute\"\n      execute(G, ctx, G.active_player_idx, execute_action);\n    }\n    else {\n      return INVALID_MOVE;\n    }\n  }\n  else {\n    return INVALID_MOVE;\n  }\n};\n\nexport const log_msg: Move = (G, ctx, msg: string) => {\n  G.gamelogs.unshift(msg);\n}\n\nexport const CSPR = {\n  setup: setup,\n  moves: {\n    add_action,\n    flip,\n    execute,\n    ai_act,\n    log_msg,\n  },\n  minPlayers: 1,\n  maxPlayers: 4,\n  turn: {\n    activePlayers: ActivePlayers.ALL,\n  },\n};","import React, { ReactNode } from 'react';\nimport { Entity } from './types';\n\n// import './icons.css';\nimport { contain_key } from './utils';\n\nconst fruit_style = {\n  height: \"auto\",\n  width: \"1.0em\",\n};\n\nexport const FRUITS: ReactNode[]= [\n  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/tomato_1f345.png\",\n  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/lemon_1f34b.png\",\n  \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/green-apple_1f34f.png\",\n].map(src => <img src={src} style={fruit_style} />);\n\nexport const shield_icon = <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/shield_1f6e1.png\" style={fruit_style} />;\n\nexport const skip_icon = <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/twitter/259/running-shoe_1f45f.png\" style={fruit_style} />;\n\nexport function get_entity_icon(entity: Entity): ReactNode {\n  if (typeof entity == \"object\") {\n    return FRUITS[entity.fruit];\n  }\n  else if (entity == \"shield\") {\n    return shield_icon;\n  }\n  else {\n    return skip_icon;\n  }\n}","import React from 'react';\nimport { IState, Action, Phase, IOperation, IGame, ICard, FlipAction } from './types'\n\nexport function init_state(): IState {\n  return {\n    board: \"GoalBoard\",\n    player_idx: 0,\n    log: \"\",\n  };\n}\n\nconst change_hand_selected: Action = (S, idx: number) => {\n  if (S.hand_selected == idx) {\n    S.hand_selected = undefined;\n  }\n  else {\n    S.hand_selected = idx;\n  }\n}\n\nfunction get_place_operations(from_idx: number, card_idx: number): IOperation[] {\n  let directions = [0, 1, 3, 2];\n  let names = [\"自己\", \"下家\", \"上家\", \"对家\"];\n\n  return directions.map((direction, idx) => ({\n    name: names[idx],\n    action: \"add_place_action\",\n    args: [from_idx, card_idx, direction],\n  }));\n}\n\n// const change_operations_on_select_hand: Action = (S, should_change: boolean) => {\n//   if (should_change) {\n//     if (S.hand_selected != undefined) {\n//       S.operations = get_place_operations(S.player_idx, S.hand_selected);\n//     }\n//     else {\n//       S.operations = [];\n//     }\n//   }\n//   else {\n//     console.log(\"Should not change\");\n//     return;\n//   }\n// }\n\nexport function get_operations(G: IGame, S: IState): IOperation[] {\n  let player = G.players[S.player_idx];\n  if (G.phase == \"place\") {\n    if (!player.placed && S.hand_selected != undefined) {\n      return get_place_operations(S.player_idx, S.hand_selected);\n    }\n    else {\n      return [];\n    }\n  }\n  else {\n    if (G.active_player_idx == S.player_idx) {\n      if (G.next_action == \"flip\") {\n        let flip_actions: IOperation[] = [\n          {name: \"翻开\", action: \"flip\", args: [S.player_idx, \"flip\"]},\n        ];\n        if (player.entities.includes(\"skip\")) {\n          flip_actions.push({name: \"跳过\", action: \"flip\", args: [S.player_idx, \"skip\"]});\n        }\n        if ((player.hand.length > 0) && (S.hand_selected != undefined)) {\n          flip_actions.unshift({name: \"打出存档\", action: \"flip\", args: [S.player_idx, {archive_idx: S.hand_selected}]});\n        }\n        return flip_actions;\n      }\n      else {\n        let execute_actions: IOperation[] = [\n          {name: \"执行\", action: \"execute\", args: [S.player_idx, \"execute\"]},\n        ];\n        let top_card = player.discard[0];\n        if (top_card.fruit != undefined) {\n          execute_actions.push({name: \"作为水果\", action: \"execute\", args: [S.player_idx, \"fruit\"]});\n        }\n        return execute_actions;\n      }\n    }\n    else {\n      if (S.player_idx == G.host && G.ai_players.includes(G.active_player_idx)) {\n        return [\n          {\n            name: \"行动\",\n            action: \"ai_act\",\n            args: [S.player_idx],\n          }\n        ];\n      }\n      else {\n        return [];\n      }\n    }\n  }\n}\n\nconst select_hand: Action = (S, idx: number, hand: ICard[]) => {\n  change_hand_selected(S, idx);\n  let card = hand[idx];\n  log_msg(S, <span>{card.name}: {card.desc}</span>);\n}\n\nconst clear_state: Action = (S) => {\n  S.hand_selected = undefined;\n}\n\nconst change_board: Action = (S, board) => {\n  S.board = board;\n}\n\nconst log_msg: Action = (S, msg) => {\n  S.log = msg;\n}\n\nexport const ACTIONS: Record<string, Action> = {\n  select_hand,\n  clear_state,\n  change_board,\n  log_msg,\n};","export function map_object<a,b>(fn: (arg: a, key?: string) => b, obj: Record<string,a>) {\n  let new_obj: Record<string,b> = {};\n\n  for (let k in obj) {\n    new_obj[k] = fn(obj[k], k);\n  }\n\n  return new_obj;\n}\n\nexport function reorder<a>(list: a[], indexes: number[]): a[] {\n  return indexes.map(idx => list[idx]);\n}\n\nexport function contain_key<a,b>(value: a, key: b) {\n  if (typeof value == \"object\" && key in value) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}","import { CombinedAction, Dispatcher, ExecuteAction, FlipAction } from './types';\n\nconst add_place_action: CombinedAction = (moves, actions, from_idx: number, card_idx: number, direction: number) => {\n  moves.add_action({from_idx, card_idx, direction});\n  actions.clear_state();\n};\n\nconst ai_act: CombinedAction = (moves, actions, from_idx: number) => {\n  moves.ai_act(from_idx);\n};\n\nconst flip: CombinedAction = (moves, actions, player_idx: number, flip_action: FlipAction) => {\n  moves.flip(player_idx, flip_action);\n}\n\n\nconst execute: CombinedAction = (moves, actions, player_idx: number, execute_action: ExecuteAction) => {\n  moves.execute(player_idx, execute_action);\n}\n\n// const select_hand: CombinedAction = (moves, actions, hand_idx: number) => {\n//   actions.select_hand(hand_idx);\n//   moves.show_hand_info(hand_idx);\n// }\n\nexport const COMBINED: Record<string, CombinedAction> = {\n  add_place_action,\n  ai_act,\n  flip,\n  execute,\n  // select_hand,\n};","import React, { ReactNode as EL, FC, useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { produce } from 'immer';\nimport { AVATARS } from './assets';\n\nimport './Board.css';\n\nimport { ICard, IPlayer, IGame, IState, Action, IOperation, Dispatcher, CombinedAction, BoardProps } from './types';\nimport { FRUITS, get_entity_icon } from './icons';\nimport { Ctx } from 'boardgame.io';\nimport { BoardProps as BGBoardProps } from 'boardgame.io/react';\nimport { CARDS } from './cards';\nimport { ACTIONS, get_operations, init_state } from './actions';\nimport { map_object, reorder } from './utils';\nimport { COMBINED } from './combiner';\nimport { goal_illust as goal_illust_src } from './assets';\n\nfunction TopPanel(props: {gameCount: string|number, checkGoal:()=>void}) {\n  return <div className=\"top-panel\">\n    <button className=\"check-goal-button\" onClick={props.checkGoal} >查看目标</button>\n    {props.gameCount}\n  </div>;\n}\n\nfunction DeckArea(props: {cardNum: number}) {\n  return <div className=\"deck-area\">\n    <div className=\"card-num\">\n      {props.cardNum}\n    </div>\n  </div>;\n}\n\nfunction PlayArea(props: {playedCard?: ICard}) {\n  return <div className=\"play-area\">\n    <Card {...props.playedCard} />\n  </div>;\n}\n\nfunction CardAreas(props: {cardNum: number, playedCard?: ICard}) {\n  // Both draw pile and discard pile go together,\n  // Also, Card should be 100% and be contained with card containers\n  return <div className=\"card-areas\">\n    <DeckArea cardNum={props.cardNum} />\n    <PlayArea playedCard={props.playedCard} />\n  </div>;\n}\n\nfunction Avatar(props: {illust?: string, selected?: boolean, out?: boolean}) {\n  return <div className=\"avatar\" style={{border:(props.selected)?\"3px solid #61dafb\":(props.out)?\"1px solid #f5222d\":undefined}}>\n    <img src={props.illust} className=\"avatar-img\" />\n  </div>;\n}\n\nfunction InfoLine(props: {content: string|EL}) {\n  return <div className=\"info-line\" style={{color: (props.content==\"扣给你\")?\"#61dafb\":undefined}}>\n    {props.content}\n  </div>;\n}\n\n// TODO: Make an adapter to fit those two\nexport interface IPlayerInfo extends IPlayer {\n  selected?: boolean, \n  name: string, \n  info: string | EL[],\n};\n\nfunction PlayerInfo(props: IPlayerInfo) {\n  return <div className=\"player-info\">\n    <Avatar illust={props.illust} selected={props.selected} out={props.out} />\n    <InfoLine content={`${props.name}(${props.score}分)`} />\n    <InfoLine content={props.info}/>\n  </div>;\n}\n\nfunction Player(props: {playerInfo: IPlayerInfo}) {\n  return <div className=\"player\">\n    <CardAreas cardNum={props.playerInfo.deck.length} playedCard={props.playerInfo.discard[0]} />\n    <PlayerInfo {...props.playerInfo} />\n  </div>;\n}\n\nfunction Central(props: {players: IPlayerInfo[]}) {\n  return <div className=\"central\">\n    {props.players.map(player => \n    // illust name score info\n      <Player playerInfo={player} />\n    )}\n  </div>;\n}\n\nfunction InfoPanel(props: {log: string}) {\n  // Top panel is only used to display count, all other logs are displayed in info panel\n  useEffect(()=>console.log(props.log), [props.log]);\n  return <div className=\"info-panel\">\n    {props.log}\n  </div>;\n}\n\nfunction Controller(props: {operations: IOperation[], combined: Record<string, Dispatcher>, autoMove?: boolean, G:IGame}) {\n  // Use this method at first, and props.autoMove is only used when needed\n  let move1 = props.operations[0];\n  let autoMove = move1 && (move1.name == \"行动\");\n  useEffect(() => {\n    if (autoMove == true) {\n      let operation = props.operations[0];\n      console.log(`Ready to auto_move ${props.G.active_player_idx} ${props.G.next_action}`);\n      setTimeout(()=>{\n        props.combined[operation.action](...(operation.args || []));\n      }, 600);\n    }\n    else {\n      return;\n    }\n  }, [props.G.active_player_idx, props.G.next_action]);\n\n  let operations = (autoMove)? [] : props.operations;\n\n  return <div className=\"controller\">\n    {operations.map(operation => \n      <button className=\"controller-button\" onClick={() => props.combined[operation.action](...(operation.args || []))}>{operation.name}</button>\n    )}\n  </div>;\n}\n\nfunction Card(props: Partial<ICard>) {\n  return <div className=\"card\">\n    <div className=\"illust-container\">\n      <img className=\"illust\" src={props.illust} />\n    </div>\n    <div className=\"card-fruit\" style={{display:(props.fruit != undefined)?undefined:\"none\"}}>{(props.fruit != undefined)? FRUITS[props.fruit] : \"\"}</div>\n  </div>;\n}\n\nfunction CardContainer(props: {card: Partial<ICard>, handleClick: ()=>void}) {\n  return <div \n    className = \"card-container\" \n    style = {{border:(props.card.selected == true)?\"3px solid #61dafb\":undefined}}\n    onClick = {props.handleClick}\n  >\n    <Card {...props.card} />\n  </div>;\n}\n\nfunction CardRow(props: {cards: ICard[], handleCardClick: (idx: number)=>()=>void}) {\n  return <div className=\"card-row\">\n    {props.cards.map((card, idx) => <CardContainer card={card} handleClick={props.handleCardClick(idx)} />)}\n  </div>;\n}\n\nfunction Template(props: {}) {\n  return <div className=\"template\">\n  </div>;\n}\n\nfunction hand_processor(S: IState): (card: ICard, idx: number) => ICard {\n  return (card, idx) => ({\n    ...card,\n    selected: S.hand_selected == idx,\n  });\n}\n\nfunction get_player_info(player: IPlayer, G: IGame, S: IState): string | EL[] {\n  if (G.phase == \"place\") {\n    if (player.previous_action != undefined) {\n      let target_idx = (G.players.indexOf(player) + player.previous_action) % 4;\n      if (target_idx == S.player_idx && player.previous_action != 0) {\n        return \"扣给你\";\n      }\n      else {\n        return [\"扣给自己\", \"扣给下家\", \"扣给对家\", \"扣给上家\",][player.previous_action];\n      }\n    }\n    else {\n      return \"准备扣牌\";\n    }\n  }\n  else {\n    if (player.finished) {\n      if (player.out) {\n        return \"已出局\";\n      }\n      else {\n        return \"已完成\";\n      }\n    }\n    else {\n      return player.entities.map(entity => get_entity_icon(entity));\n    }\n  }\n}\n\nfunction get_position(idx: number, player_idx: number) {\n  let diff = idx - player_idx;\n  if (diff < 0) {\n    return 4 + diff;\n  }\n  else {\n    return diff;\n  }\n}\n\nfunction process_player(player: IPlayer, idx: number, G: IGame, S: IState): IPlayerInfo {\n  return {\n    ...player,\n    name: [\"玩家\", \"下家\", \"对家\", \"上家\"][get_position(idx, S.player_idx)],\n    info: get_player_info(player, G, S),\n    selected: (G.phase == \"action\") && (idx == G.active_player_idx),\n  };\n}\n\nfunction GameBoard(props: BoardProps){\n  return <div className=\"board\">\n    <Central \n      players = {reorder(props.G.players.map((player, idx) => process_player(player, idx, props.G, props.S)), [(props.S.player_idx+2)%4,(props.S.player_idx+3)%4,(props.S.player_idx+1)%4,props.S.player_idx])}\n    />\n    <InfoPanel log={(props.G.phase == \"place\")? props.S.log : props.G.gamelogs[0]} />\n    {/* <InfoPanel log=\"这是一条log\" /> */}\n    {/* <InfoPanel log={props.S.log} /> */}\n    {/* <InfoPanel log={props.G.gamelog} /> */}\n    <Controller \n      operations = {get_operations(props.G, props.S)}\n      combined = {props.combined}\n      G = {props.G}\n    />\n    <CardRow \n      cards = {props.G.players[props.S.player_idx].hand.map(hand_processor(props.S))}  \n      handleCardClick = {idx => () => props.actions.select_hand(idx, props.G.players[props.S.player_idx].hand)}\n    />\n    <TopPanel gameCount={`${\"東南西\"[Math.floor(props.G.round/4)]}${props.G.round % 4 + 1}局`} checkGoal={()=>props.actions.change_board(\"GoalBoard\")} />\n  </div>;\n}\n\nfunction Goal(props: {goal: Partial<ICard>}) {\n  let goal_illust = (props.goal.is_public == true)? \"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/263/green-salad_1f957.png\":goal_illust_src;\n  return <div className=\"goal\">\n    <div className=\"goal-illust-container\">\n      <img className=\"goal-illust\" src={goal_illust} />\n    </div>\n    <div className=\"goal-desc-container\">\n      {/*props.goal.name <br/> props.goal.desc*/}\n      <div className=\"goal-desc\">\n        {props.goal.name}<br/>\n        {props.goal.desc}\n      </div>\n    </div>\n  </div>;\n}\n\nfunction process_public_goal(desc: string|EL): EL {\n  let fruits_lookup: Record<string, EL> = {A:FRUITS[0], B:FRUITS[1], C:FRUITS[2]};\n  return (desc as string).split(\"\").map(char => fruits_lookup[char]);\n}\n\nfunction GoalBoard(props: BoardProps) {\n  return <div className=\"board\">\n    <div className=\"goals-container\">\n      {props.G.public_goals.filter(goal => !goal.is_achieved).map(goal => <Goal goal={{name: goal.name, desc:process_public_goal(goal.desc), is_public:goal.is_public}} />)}\n      {props.G.players[props.S.player_idx].goals.map(goal => <Goal goal={{name: goal.name, desc:goal.desc, is_public:goal.is_public}}/>)}\n    </div>\n    <button className=\"gb-back-button\" onClick={() => props.actions.change_board(\"GameBoard\")} >返回</button>\n  </div>;\n}\n\nconst BOARDS: Record<string, (props:BoardProps)=>JSX.Element> = {\n  GameBoard,\n  GoalBoard,\n};\n\nexport function Board(props: BGBoardProps<IGame>) {\n  let [S, setS] = useState<IState>(init_state);\n  let actions = map_object<Action, Dispatcher>(\n    action => (...args: any[]) => setS(produce(S => action(S, ...args))), \n    ACTIONS,\n  );\n  let combined = map_object<CombinedAction, Dispatcher>(\n    action => (...args: any[]) => action(props.moves, actions, ...args),\n    COMBINED,\n  );\n  let {G, ctx, moves} = props;\n  let board_props: BoardProps = {\n    G, ctx, moves, S, actions, combined,\n  };\n\n  // Show hand info\n  // Don't use useEffect to change the log, a strange bug may happen\n  // useEffect(()=>{\n  //   if (S.hand_selected != undefined) {\n  //     let card = G.players[S.player_idx].hand[S.hand_selected];\n  //     actions.log_msg(`${card.name}: ${card.desc}`);\n  //   }\n  //   else {\n  //     return;\n  //   }\n  // }, [S.hand_selected]);\n\n  // Show game info\n  // useEffect(() => actions.log_msg(G.gamelog), [G.gamelog]);\n\n  useEffect(() => {\n    if (G.phase == \"place\") {\n      actions.change_board(\"GoalBoard\");\n    }\n  }, [G.phase]);\n\n  useEffect(() => {\n    setS({...S, player_idx: parseInt(props.playerID || \"0\")});\n    console.log({...props});\n    console.log(`The player ID is: ${props.playerID}`);\n  }, []);\n\n  let board: (props:BoardProps) => JSX.Element = BOARDS[S.board] || GameBoard;\n  // let board = GoalBoard;\n\n  return board(board_props);\n}\n\n","// @ts-nocheck\nimport React, { useEffect } from 'react';\nimport { Client, Lobby } from 'boardgame.io/react';\nimport { Local, SocketIO } from 'boardgame.io/multiplayer';\nimport { LobbyClient } from 'boardgame.io/client'\nimport { CSPR } from './Game';\nimport { Board } from './Board';\n\n// const App = Client({\n//   game: CSPR,\n//   board: Board,\n//   debug: false,\n// });\n\n// const App = () => {\n//   useEffect(()=>{\n//     console.log(\"Start loading\");\n//     let lc = new LobbyClient({server: \"http://localhost:8001\"});\n//     lc.listGames().then(console.log).then(()=>console.log(\"Loaded\"));\n//   }, []);\n//   return <Lobby\n//     gameServer={`http://localhost:8000`} \n//     lobbyServer={`http://localhost:8001`}\n//     gameComponents={[{game: CSPR, name: \"default\", board: Board}]} \n//   />;\n// };\n\nconst CSPRClient = Client({\n  game: CSPR,\n  board: Board,\n  debug: false,\n  multiplayer: Local(),\n  // multiplayer: SocketIO({server: 'localhost:8000'}),\n\n  numPlayers: 1,\n});\n\nconst App = () => {\n  return <div style={{display: \"flex\"}}>\n    <CSPRClient playerID=\"0\" />\n    {/* <CSPRClient playerID=\"1\" matchID=\"default\" /> */}\n  </div>\n};\n\n// const App = () => (<div>Hello world!</div>);\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}